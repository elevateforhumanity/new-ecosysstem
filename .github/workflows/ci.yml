name: Production Hardening CI

on:
  push:
    branches: [ main, copilot/*, feat/production-hardening-* ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      continue-on-error: true  # Don't fail CI on linting warnings initially
      
    - name: Run type checker  
      run: npm run typecheck
      
    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
        JWT_SECRET: test_secret_key_for_ci_minimum_32_characters
        
    - name: Build application
      run: npm run build
      
    - name: Environment validation check
      run: npm run env:check
      env:
        NODE_ENV: production
        JWT_SECRET: production_ready_jwt_secret_key_minimum_32_characters
        
    - name: Security audit (production only)
      if: matrix.node-version == '20.x' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feat/production-hardening'))
      run: npm run security:audit
      continue-on-error: true  # Don't fail on audit warnings initially
      
    - name: Size check
      if: matrix.node-version == '20.x'
      run: npm run size:check
      continue-on-error: true
      
    - name: Production readiness check
      if: matrix.node-version == '20.x'
      run: npm run check:prod
      continue-on-error: true
      
    - name: Upload build artifacts
      if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          server/
          !**/node_modules/
        retention-days: 30

  load-test:
    runs-on: ubuntu-latest
    needs: ci
    if: startsWith(github.ref, 'refs/heads/feat/production-hardening') || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install k6 (load testing)
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run basic load test
      run: |
        # Start server in background
        timeout 60s node simple-server.cjs &
        SERVER_PID=$!
        sleep 5
        
        # Simple k6 load test script
        cat << 'EOF' > load-test.js
        import http from 'k6/http';
        import { check } from 'k6';
        
        export const options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '30s', target: 0 },
          ],
        };
        
        export default function () {
          const response = http.get('http://localhost:5000/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        # Run load test
        k6 run load-test.js
        
        # Clean up
        kill $SERVER_PID 2>/dev/null || true
      timeout-minutes: 5
      continue-on-error: true  # Don't fail CI on load test issues initially