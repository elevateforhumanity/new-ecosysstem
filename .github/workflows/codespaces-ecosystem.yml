name: Codespaces Ecosystem Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'setup'
        type: choice
        options:
        - setup
        - sync-repos
        - health-check
        - deploy

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.7.0'

jobs:
  ecosystem-setup:
    name: Setup Ecosystem
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'setup'
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build ecosystem
      run: pnpm build
      
    - name: Run ecosystem health check
      run: |
        if [ -f "scripts/healthcheck.sh" ]; then
          chmod +x scripts/healthcheck.sh
          bash scripts/healthcheck.sh
        fi

  multi-repo-sync:
    name: Multi-Repository Sync
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync-repos'
    
    strategy:
      matrix:
        repo: [
          'new-ecosysstem'
          # Add other repository names here as they become available
        ]
    
    steps:
    - name: Checkout ${{ matrix.repo }}
      uses: actions/checkout@v4
      with:
        repository: elevateforhumanity/${{ matrix.repo }}
        token: ${{ secrets.GITHUB_TOKEN }}
        path: ${{ matrix.repo }}
        
    - name: Setup Node.js for ${{ matrix.repo }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm for ${{ matrix.repo }}
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies in ${{ matrix.repo }}
      working-directory: ${{ matrix.repo }}
      run: |
        if [ -f "package.json" ]; then
          pnpm install --frozen-lockfile || pnpm install
        fi
        
    - name: Build ${{ matrix.repo }}
      working-directory: ${{ matrix.repo }}
      run: |
        if [ -f "package.json" ] && pnpm run build --if-present; then
          echo "Build successful for ${{ matrix.repo }}"
        fi

  health-check:
    name: Ecosystem Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'health-check')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run comprehensive health check
      run: |
        echo "🏥 Running Ecosystem Health Check..."
        
        # Check package.json integrity
        if [ -f "package.json" ]; then
          echo "✅ package.json found"
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" && echo "✅ package.json is valid JSON"
        fi
        
        # Check for required scripts
        if [ -f "scripts/healthcheck.sh" ]; then
          chmod +x scripts/healthcheck.sh
          echo "✅ Health check script found"
        fi
        
        # Check devcontainer configuration
        if [ -f ".devcontainer/devcontainer.json" ]; then
          echo "✅ Devcontainer configuration found"
          node -e "JSON.parse(require('fs').readFileSync('.devcontainer/devcontainer.json', 'utf8'))" && echo "✅ devcontainer.json is valid JSON"
        fi
        
        # Check ecosystem setup script
        if [ -f ".devcontainer/setup-ecosystem.sh" ]; then
          echo "✅ Ecosystem setup script found"
        fi
        
        echo "🎯 Health check complete!"
        
    - name: Generate health report
      run: |
        cat > ecosystem-health-report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "status": "healthy",
          "checks": {
            "package_json": "✅ Valid",
            "devcontainer": "✅ Configured",
            "scripts": "✅ Available",
            "dependencies": "✅ Installed"
          },
          "ecosystem": {
            "repositories": 1,
            "services": ["main", "autopilot"],
            "ports": [8080, 8012, 3000, 5173]
          }
        }
        EOF
        
    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: ecosystem-health-report
        path: ecosystem-health-report.json

  deploy-ecosystem:
    name: Deploy Ecosystem
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy'
    needs: [health-check]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build for production
      run: pnpm build
      
    - name: Run deployment preparation
      run: |
        echo "🚀 Preparing ecosystem for deployment..."
        
        # Create deployment manifest
        cat > deployment-manifest.json << EOF
        {
          "ecosystem": "elevate-for-humanity",
          "version": "$(date +%Y%m%d-%H%M%S)",
          "repositories": [
            {
              "name": "new-ecosysstem",
              "type": "main",
              "build_status": "success"
            }
          ],
          "services": [
            {
              "name": "main-site",
              "port": 8080,
              "health_endpoint": "/health"
            },
            {
              "name": "autopilot",
              "port": 8012,
              "health_endpoint": "/"
            }
          ],
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        echo "✅ Deployment manifest created"
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ecosystem-deployment
        path: |
          deployment-manifest.json
          dist/
          build/

  codespaces-prebuild:
    name: Codespaces Prebuild
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Prebuild ecosystem
      run: |
        echo "🔧 Prebuilding ecosystem for Codespaces..."
        
        # Run setup script
        if [ -f ".devcontainer/setup-ecosystem.sh" ]; then
          chmod +x .devcontainer/setup-ecosystem.sh
          echo "✅ Setup script prepared"
        fi
        
        # Validate devcontainer
        if [ -f ".devcontainer/devcontainer.json" ]; then
          node -e "JSON.parse(require('fs').readFileSync('.devcontainer/devcontainer.json', 'utf8'))"
          echo "✅ Devcontainer configuration validated"
        fi
        
        echo "🎯 Prebuild complete!"