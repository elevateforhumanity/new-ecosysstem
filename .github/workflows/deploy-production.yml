name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        if [ -f "package.json" ] && npm run lint --if-present; then
          echo "‚úÖ Linting passed"
        else
          echo "‚ö†Ô∏è No linting configured"
        fi

    - name: Run tests
      run: |
        if [ -f "package.json" ] && npm test --if-present; then
          echo "‚úÖ Tests passed"
        else
          echo "‚ö†Ô∏è No tests configured"
        fi

    - name: Validate data files
      run: |
        echo "üîç Validating data files..."
        
        # Check if all-programs.json exists and is valid
        if [ -f "data/seeds/all-programs.json" ]; then
          node -e "
            const fs = require('fs');
            try {
              const data = JSON.parse(fs.readFileSync('data/seeds/all-programs.json', 'utf8'));
              console.log('‚úÖ all-programs.json is valid JSON');
              console.log('üìä Programs count:', Array.isArray(data) ? data.length : (data.programs ? data.programs.length : 'unknown'));
            } catch (error) {
              console.error('‚ùå all-programs.json is invalid:', error.message);
              process.exit(1);
            }
          "
        else
          echo "‚ö†Ô∏è all-programs.json not found"
        fi
        
        # Validate tenants.json
        if [ -f "tenants.json" ]; then
          node -e "
            const fs = require('fs');
            try {
              const data = JSON.parse(fs.readFileSync('tenants.json', 'utf8'));
              console.log('‚úÖ tenants.json is valid JSON');
              console.log('üìä Tenants configured:', Object.keys(data).length);
            } catch (error) {
              console.error('‚ùå tenants.json is invalid:', error.message);
              process.exit(1);
            }
          "
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Vite React app
      run: |
        if [ -d "vite-react-supabase-app" ]; then
          echo "üèóÔ∏è Building Vite React app..."
          cd vite-react-supabase-app
          npm ci
          npm run build
          cd ..
          echo "‚úÖ Vite app built successfully"
        else
          echo "‚ö†Ô∏è No Vite app found"
        fi

    - name: Generate sitemaps
      run: |
        echo "üó∫Ô∏è Generating sitemaps..."
        node scripts/generate-sitemap.js
      env:
        BASE_URL: 'https://www.elevateforhumanity.org'
        OUTPUT_DIR: './deploy'

    - name: Prepare deployment package
      run: |
        echo "üì¶ Preparing deployment package..."
        
        # Create deploy directory if it doesn't exist
        mkdir -p deploy
        
        # Copy static files
        if [ -d "public" ]; then
          cp -r public/* deploy/ 2>/dev/null || echo "No public files to copy"
        fi
        
        # Copy Vite build output
        if [ -d "vite-react-supabase-app/dist" ]; then
          cp -r vite-react-supabase-app/dist/* deploy/
          echo "‚úÖ Copied Vite build output"
        fi
        
        # Copy Netlify configuration
        if [ -f "netlify.toml" ]; then
          cp netlify.toml deploy/
          echo "‚úÖ Copied Netlify configuration"
        fi
        
        # Copy Netlify functions
        if [ -d "netlify/functions" ]; then
          mkdir -p deploy/netlify
          cp -r netlify/functions deploy/netlify/
          echo "‚úÖ Copied Netlify functions"
        fi
        
        # Ensure _redirects file exists
        if [ ! -f "deploy/_redirects" ]; then
          echo "/* /index.html 200" > deploy/_redirects
          echo "‚úÖ Created default _redirects file"
        fi
        
        echo "üìÅ Deployment package contents:"
        ls -la deploy/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: deploy/
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: deploy/

    - name: Install Netlify CLI
      run: npm install -g netlify-cli

    - name: Deploy to Netlify
      run: |
        echo "üöÄ Deploying to Netlify..."
        
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          # Deploy to staging
          netlify deploy --dir=deploy --site=${{ secrets.NETLIFY_STAGING_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
          echo "‚úÖ Deployed to staging"
        else
          # Deploy to production
          netlify deploy --prod --dir=deploy --site=${{ secrets.NETLIFY_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
          echo "‚úÖ Deployed to production"
        fi

    - name: Update Supabase Edge Functions
      run: |
        echo "üîÑ Updating Supabase Edge Functions..."
        
        if [ -d "supabase/functions" ] && [ -n "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          # Install Supabase CLI
          curl -sSfL https://supabase.com/install.sh | sh
          export PATH=$PATH:$HOME/.local/bin
          
          # Deploy Edge Functions
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          echo "‚úÖ Edge Functions deployed"
        else
          echo "‚ö†Ô∏è Supabase functions not found or credentials missing"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: sbp_v0_049f7f593a8093380bff6ae29f1afb41e4e71637

    - name: Notify deployment success
      run: |
        echo "üéâ Deployment completed successfully!"
        
        DEPLOY_URL="https://www.elevateforhumanity.org"
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          DEPLOY_URL="https://staging.elevateforhumanity.org"
        fi
        
        echo "üåê Site URL: $DEPLOY_URL"
        echo "üìä Commit: ${{ github.sha }}"
        echo "üë§ Deployed by: ${{ github.actor }}"

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        DEPLOY_URL="https://www.elevateforhumanity.org"
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          DEPLOY_URL="https://staging.elevateforhumanity.org"
        fi
        
        echo "**Site URL:** [$DEPLOY_URL]($DEPLOY_URL)" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "‚ùå Deployment failed"
        echo "Failed jobs: ${{ toJson(needs) }}"
        # Add notification logic here (Slack, email, etc.)