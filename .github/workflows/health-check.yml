name: Health Check & Monitoring

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - basic
        - performance
        - security

env:
  SITE_URL: 'https://www.elevateforhumanity.org'
  STAGING_URL: 'https://staging.elevateforhumanity.org'

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install -g lighthouse
        npm install axios cheerio

    - name: Basic connectivity check
      run: |
        echo "🔍 Performing basic connectivity checks..."
        
        # Check main site
        if curl -sSf "$SITE_URL" > /dev/null; then
          echo "✅ Main site is accessible"
        else
          echo "❌ Main site is not accessible"
          exit 1
        fi
        
        # Check staging if configured
        if [ -n "$STAGING_URL" ]; then
          if curl -sSf "$STAGING_URL" > /dev/null; then
            echo "✅ Staging site is accessible"
          else
            echo "⚠️ Staging site is not accessible"
          fi
        fi

    - name: Check critical pages
      run: |
        echo "📄 Checking critical pages..."
        
        CRITICAL_PAGES=(
          "/"
          "/programs/"
          "/about/"
          "/contact/"
          "/students/"
          "/contracts/"
        )
        
        for page in "${CRITICAL_PAGES[@]}"; do
          URL="${SITE_URL}${page}"
          
          if curl -sSf "$URL" > /dev/null; then
            echo "✅ $page is accessible"
          else
            echo "❌ $page is not accessible"
          fi
        done

    - name: Check API endpoints
      if: github.event.inputs.check_type == 'full' || github.event_name == 'schedule'
      run: |
        echo "🔌 Checking API endpoints..."
        
        # Check Netlify functions
        FUNCTIONS=(
          "/api/secure-api"
          "/api/sitemap-cron"
        )
        
        for func in "${FUNCTIONS[@]}"; do
          URL="${SITE_URL}${func}"
          
          # Use HEAD request to avoid triggering function execution
          if curl -sSf -I "$URL" > /dev/null 2>&1; then
            echo "✅ Function $func is available"
          else
            echo "⚠️ Function $func may not be available"
          fi
        done

    - name: Check Supabase connectivity
      if: github.event.inputs.check_type == 'full' || github.event_name == 'schedule'
      run: |
        echo "🗄️ Checking Supabase connectivity..."
        
        if [ -n "${{ secrets.SUPABASE_URL }}" ] && [ -n "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
          # Test Supabase connection
          node -e "
            const { createClient } = require('@supabase/supabase-js');
            
            async function testSupabase() {
              try {
                const supabase = createClient(
                  '${{ secrets.SUPABASE_URL }}',
                  '${{ secrets.SUPABASE_ANON_KEY }}'
                );
                
                const { data, error } = await supabase
                  .from('programs')
                  .select('count')
                  .limit(1);
                
                if (error) {
                  console.log('⚠️ Supabase query failed:', error.message);
                } else {
                  console.log('✅ Supabase is accessible');
                }
              } catch (error) {
                console.log('❌ Supabase connection failed:', error.message);
              }
            }
            
            testSupabase();
          " 2>/dev/null || echo "⚠️ Supabase check skipped (dependencies not available)"
        else
          echo "⚠️ Supabase credentials not configured"
        fi

    - name: Performance check
      if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full'
      run: |
        echo "⚡ Running performance checks..."
        
        # Lighthouse performance audit
        lighthouse "$SITE_URL" \
          --only-categories=performance \
          --chrome-flags="--headless --no-sandbox" \
          --output=json \
          --output-path=./lighthouse-performance.json \
          --quiet || echo "⚠️ Lighthouse performance check failed"
        
        if [ -f "./lighthouse-performance.json" ]; then
          PERFORMANCE_SCORE=$(node -e "
            const report = JSON.parse(require('fs').readFileSync('./lighthouse-performance.json', 'utf8'));
            console.log(Math.round(report.lhr.categories.performance.score * 100));
          " 2>/dev/null || echo "0")
          
          echo "📊 Performance Score: $PERFORMANCE_SCORE/100"
          
          if [ "$PERFORMANCE_SCORE" -lt 70 ]; then
            echo "⚠️ Performance score is below threshold (70)"
          else
            echo "✅ Performance score is acceptable"
          fi
        fi

    - name: Security headers check
      if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'
      run: |
        echo "🔒 Checking security headers..."
        
        HEADERS_RESPONSE=$(curl -sI "$SITE_URL")
        
        # Check for important security headers
        if echo "$HEADERS_RESPONSE" | grep -i "x-frame-options" > /dev/null; then
          echo "✅ X-Frame-Options header present"
        else
          echo "⚠️ X-Frame-Options header missing"
        fi
        
        if echo "$HEADERS_RESPONSE" | grep -i "x-content-type-options" > /dev/null; then
          echo "✅ X-Content-Type-Options header present"
        else
          echo "⚠️ X-Content-Type-Options header missing"
        fi
        
        if echo "$HEADERS_RESPONSE" | grep -i "x-xss-protection" > /dev/null; then
          echo "✅ X-XSS-Protection header present"
        else
          echo "⚠️ X-XSS-Protection header missing"
        fi
        
        if echo "$HEADERS_RESPONSE" | grep -i "strict-transport-security" > /dev/null; then
          echo "✅ HSTS header present"
        else
          echo "⚠️ HSTS header missing"
        fi

    - name: Check sitemap accessibility
      run: |
        echo "🗺️ Checking sitemap accessibility..."
        
        SITEMAPS=(
          "/sitemap.xml"
          "/sitemap-main.xml"
          "/robots.txt"
        )
        
        for sitemap in "${SITEMAPS[@]}"; do
          URL="${SITE_URL}${sitemap}"
          
          if curl -sSf "$URL" > /dev/null; then
            echo "✅ $sitemap is accessible"
          else
            echo "⚠️ $sitemap is not accessible"
          fi
        done

    - name: Check for broken links
      if: github.event.inputs.check_type == 'full'
      run: |
        echo "🔗 Checking for broken links on homepage..."
        
        # Simple broken link check using curl
        node -e "
          const https = require('https');
          const http = require('http');
          
          async function checkHomepage() {
            try {
              const response = await fetch('$SITE_URL');
              const html = await response.text();
              
              // Extract links (basic regex)
              const linkMatches = html.match(/href=[\"']([^\"']+)[\"']/g) || [];
              const links = linkMatches
                .map(match => match.replace(/href=[\"']([^\"']+)[\"']/, '\$1'))
                .filter(link => link.startsWith('http') || link.startsWith('/'))
                .slice(0, 10); // Check first 10 links only
              
              console.log(\`🔍 Checking \${links.length} links...\`);
              
              for (const link of links) {
                const fullUrl = link.startsWith('/') ? '$SITE_URL' + link : link;
                
                try {
                  const linkResponse = await fetch(fullUrl, { method: 'HEAD' });
                  if (linkResponse.ok) {
                    console.log(\`✅ \${link}\`);
                  } else {
                    console.log(\`⚠️ \${link} (\${linkResponse.status})\`);
                  }
                } catch (error) {
                  console.log(\`❌ \${link} (error)\`);
                }
              }
              
            } catch (error) {
              console.log('❌ Homepage link check failed:', error.message);
            }
          }
          
          checkHomepage();
        " 2>/dev/null || echo "⚠️ Link check skipped (Node.js fetch not available)"

    - name: Upload health check artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: health-check-results
        path: |
          lighthouse-*.json
        retention-days: 7

    - name: Create health check summary
      run: |
        echo "## 🏥 Health Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Check Type:** ${{ github.event.inputs.check_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Site URL:** [$SITE_URL]($SITE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "**Checked at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "./lighthouse-performance.json" ]; then
          PERFORMANCE_SCORE=$(node -e "
            const report = JSON.parse(require('fs').readFileSync('./lighthouse-performance.json', 'utf8'));
            console.log(Math.round(report.lhr.categories.performance.score * 100));
          " 2>/dev/null || echo "N/A")
          
          echo "**Performance Score:** $PERFORMANCE_SCORE/100" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Health check completed" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "❌ Health check failed"
        echo "Site may be experiencing issues"
        # Add notification logic here (Slack, email, etc.)