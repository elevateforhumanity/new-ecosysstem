generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LmsOrganization {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  domain    String? @unique
  users     LmsUser[]
  courses   LmsCourse[]
  products  LmsProduct[]
  partners  LmsPartner[]
  createdAt DateTime @default(now())

  @@map("lms_organizations")
}

model LmsUser {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String?
  password  String             // bcrypt hash
  role      Role    @default(STUDENT)
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  enrollments LmsEnrollment[]
  orders    LmsOrder[]
  createdAt DateTime @default(now())

  @@map("lms_users")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model LmsCourse {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String  @unique
  price     Int     @default(0) // cents
  modules   LmsModule[]
  lessons   LmsLesson[]
  enrollments LmsEnrollment[]
  published Boolean @default(false)
  createdAt DateTime @default(now())

  @@map("lms_courses")
}

model LmsModule {
  id        String  @id @default(cuid())
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String
  order     Int     @default(0)
  lessons   LmsLesson[]
  createdAt DateTime @default(now())

  @@map("lms_modules")
}

model LmsLesson {
  id        String  @id @default(cuid())
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId  String?
  module    LmsModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title     String
  type      LessonType @default(TEXT)
  content   String?
  duration  Int? // seconds
  order     Int   @default(0)
  createdAt DateTime @default(now())

  @@map("lms_lessons")
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
}

model LmsEnrollment {
  id        String  @id @default(cuid())
  userId    String
  user      LmsUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Float  @default(0)
  status    EnrollStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("lms_enrollments")
}

enum EnrollStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model LmsCertificate {
  id        String  @id @default(cuid())
  userId    String
  courseId  String
  url       String
  issuedAt  DateTime @default(now())

  @@map("lms_certificates")
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model LmsProduct {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String  @unique
  price     Int     @default(0) // cents
  image     String?
  active    Boolean @default(true)
  createdAt DateTime @default(now())

  @@map("lms_products")
}

model LmsOrder {
  id               String      @id @default(cuid())
  userId           String?
  user             LmsUser?    @relation(fields: [userId], references: [id])
  total            Int         @default(0)
  status           OrderStatus @default(PENDING)
  stripeSessionId  String?
  createdAt        DateTime    @default(now())

  @@map("lms_orders")
}

model LmsPartner {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  name      String
  category  String
  city      String?
  state     String?
  email     String?
  phone     String?
  url       String?
  approved  Boolean @default(false)
  createdAt DateTime @default(now())

  @@map("lms_partners")
}

model LmsPage {
  id        String  @id @default(cuid())
  slug      String  @unique
  title     String
  content   String?
  published Boolean @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("lms_pages")
}
