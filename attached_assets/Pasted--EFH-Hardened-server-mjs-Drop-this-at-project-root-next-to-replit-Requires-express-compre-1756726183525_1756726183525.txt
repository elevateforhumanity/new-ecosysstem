// EFH Hardened server.mjs
// Drop this at project root (next to .replit). Requires: express, compression, helmet, morgan
// ENV needed: ADMIN_TOKEN (for /_restart and /_purge), optional RUN_MODE

import express from "express";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import http from "http";
import compression from "compression";
import helmet from "helmet";
import morgan from "morgan";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.set("trust proxy", true);
app.disable("x-powered-by");

// -------- Build mode & cache version --------
const BUILD_MODE = (() => {
  if (process.env.RUN_MODE) return process.env.RUN_MODE;
  const quick = path.join(__dirname, ".buildmode-quick");
  const clean = path.join(__dirname, ".buildmode-clean");
  if (fs.existsSync(clean)) return "clean";
  if (fs.existsSync(quick)) return "quick";
  return "unknown";
})();
let CACHE_VERSION = Date.now();

// -------- Paths --------
const distPath = path.join(__dirname, "client", "dist");

// -------- Global middleware (order matters) --------
app.use(helmet({
  contentSecurityPolicy: false, // keep simple for SPA assets
  crossOriginEmbedderPolicy: false,
}));
app.use(compression());

// Cache/version headers for every response
app.use((req, res, next) => {
  res.set("Cache-Control", "no-store"); // avoid sticky blanks while stabilizing
  res.set("X-Cache-Version", String(CACHE_VERSION));
  res.set("X-Build-Mode", BUILD_MODE);
  next();
});

// Access logs (short)
app.use(morgan("tiny"));

// Only parse JSON on the few endpoints that need it
const jsonParser = express.json({ limit: "200kb" });

// -------- Telemetry (from SPA) --------
let lastClientTelemetry = { tailwindOk: null, ts: null };
app.post("/_telemetry", jsonParser, (req, res) => {
  const ok = !!req.body?.tailwindOk;
  lastClientTelemetry = { tailwindOk: ok, ts: Date.now() };
  res.sendStatus(204);
});

// -------- Admin: restart & purge (protected) --------
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || "";
function checkAdmin(req) {
  const provided = req.get("X-Admin-Token") || req.body?.token || "";
  return ADMIN_TOKEN && provided === ADMIN_TOKEN;
}

app.post("/_restart", jsonParser, (req, res) => {
  if (!ADMIN_TOKEN) return res.status(500).json({ ok: false, error: "ADMIN_TOKEN not set" });
  if (!checkAdmin(req)) return res.status(403).json({ ok: false, error: "Forbidden" });
  res.json({ ok: true, restarting: true, at: new Date().toISOString() });
  setTimeout(() => process.exit(0), 150);
});

app.post("/_purge", jsonParser, (req, res) => {
  if (!ADMIN_TOKEN) return res.status(500).json({ ok: false, error: "ADMIN_TOKEN not set" });
  if (!checkAdmin(req)) return res.status(403).json({ ok: false, error: "Forbidden" });
  CACHE_VERSION = Date.now();
  res.json({ ok: true, cacheVersion: CACHE_VERSION });
});

// -------- Health --------
app.get("/health", (_req, res) => {
  const mem = process.memoryUsage();
  res.json({
    status: "healthy",
    mode: BUILD_MODE,
    timestamp: new Date().toISOString(),
    port: process.env.PORT || 5000,
    pid: process.pid,
    uptimeSec: Math.round(process.uptime()),
    memory: {
      rss: mem.rss,
      heapUsed: mem.heapUsed,
      heapTotal: mem.heapTotal,
      external: mem.external,
    },
    tailwind: {
      ok: lastClientTelemetry.tailwindOk,
      lastPingIso: lastClientTelemetry.ts ? new Date(lastClientTelemetry.ts).toISOString() : null,
    },
    cacheVersion: CACHE_VERSION,
    ready: fs.existsSync(distPath),
  });
});

// -------- Static assets & SPA fallback --------
if (!fs.existsSync(distPath)) {
  console.warn("[WARN] dist folder missing at:", distPath);
}
app.use(express.static(distPath, { etag: false, lastModified: false, maxAge: 0 }));
app.get("*", (_req, res) => res.sendFile(path.join(distPath, "index.html")));

// -------- Error handling (last) --------
// 404 is handled by SPA fallback; generic error handler below
// eslint-disable-next-line no-unused-vars
app.use((err, _req, res, _next) => {
  console.error("[ERROR]", err);
  res.status(500).json({ ok: false, error: "Internal Server Error" });
});

// -------- HTTP server + timeouts --------
const PORT = process.env.PORT || 5000;
const server = http.createServer(app);

// Keep these generous to avoid random client disconnects
server.keepAliveTimeout = 60_000;      // 60s
server.headersTimeout = 65_000;        // must be > keepAliveTimeout
server.requestTimeout = 60_000;        // 60s

server.listen(PORT, () => {
  console.log(`EFH server running on http://localhost:${PORT} | mode=${BUILD_MODE}`);
});

// -------- Process safety nets --------
process.on("unhandledRejection", (reason, p) => {
  console.error("[unhandledRejection]", reason, "at", p);
});
process.on("uncaughtException", (err) => {
  console.error("[uncaughtException]", err);
  // choose to keep running; restart only via /_restart
});

const shutdown = (sig) => () => {
  console.log(`[${sig}] graceful shutdown...`);
  server.close(() => process.exit(0));
  setTimeout(() => process.exit(0), 2_000).unref();
};
process.on("SIGTERM", shutdown("SIGTERM"));
process.on("SIGINT", shutdown("SIGINT"));


Got you. I dropped a hardened server.mjs into the canvas that fixes the most common “server keeps stopping / not loading” causes on Replit:

What it does:

Safe static serving + SPA fallback (won’t 404 the app)

Compression + Helmet + compact logging

Health endpoint with memory/uptime

Protected /_restart and /_purge (uses ADMIN_TOKEN)

Cache-busting headers and a server-side cache version

Generous HTTP timeouts to prevent random disconnects

Guards for unhandledRejection and uncaughtException (log, don’t die)

Graceful shutdown on SIGINT/SIGTERM


Quick setup:

1. Install new deps at the root:



npm i express compression helmet morgan

2. Replace your root server.mjs with the one in the canvas (named “EFH Hardened server.mjs”).


3. Ensure your .replit still builds the client then starts:



run = "bash -lc 'cd client && npm run quick && cd .. && npm run start'"

4. Add ADMIN_TOKEN in Replit Secrets (any strong random string).

Your /debug page’s buttons already use it for /_restart and /_purge.



5. Start it:



npm run start

Sanity checks:

Open /health → you should see status: "healthy", mode, cacheVersion, uptimeSec.

Your app loads; bottom-right Tailwind badge should be green; bottom-left cache badge shows cache v... · quick.


If it still “stops loading,” tell me what you see in the Replit console right before it stops (any errors/timeouts). I can tweak limits or add a watchdog based on that.

