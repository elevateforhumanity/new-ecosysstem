Awesome — I’ll extend your Account Drawer to collect voucher / funding / coupon info and automatically pass it into Stripe checkout metadata from any Enroll button across the ecosystem.

You’ll add one new “Funding & Vouchers” card to the drawer + a tiny script to persist the data and inject it into efhEnroll calls.


---

1) Add a “Funding & Vouchers” card to the drawer

Put this inside the drawer body (right under the “Preferences” card, before “My Enrollments”) in the drawer you already embedded:

<!-- Funding & Vouchers -->
<div class="efh-card">
  <h3>Funding & Vouchers</h3>
  <div class="efh-row efh-row-2">
    <input id="efhVoucherId" class="efh-input" placeholder="Voucher ID (e.g., WorkOne #)"/>
    <input id="efhCaseMgr" class="efh-input" placeholder="Case Manager Email"/>
  </div>
  <div class="efh-row efh-row-2" style="margin-top:8px">
    <select id="efhFundingSrc" class="efh-select">
      <option value="">Funding Source (optional)</option>
      <option value="WIOA">WIOA / WorkOne</option>
      <option value="ETPL">INTraining / ETPL</option>
      <option value="WRG">Workforce Ready Grant</option>
      <option value="Self-Pay">Self-Pay</option>
      <option value="Other">Other</option>
    </select>
    <input id="efhCoupon" class="efh-input" placeholder="Coupon / Promo Code (optional)"/>
  </div>
  <div class="efh-row" style="margin-top:8px">
    <button id="efhSaveFunding" class="efh-btn">Save Funding Info</button>
    <span id="efhFundingMsg" class="efh-hint"></span>
  </div>
  <p class="efh-hint">We’ll attach these details to your checkout for faster authorization and billing support.</p>
</div>

(Uses your drawer styles—no extra CSS needed.)


---

2) Script: persist the fields + inject into checkout

Add these new lines to the same <script type="module"> block of the drawer:

// === Funding state (persisted locally and used at checkout) ===
const fundingKeys = ['voucher_id','case_manager_email','funding_source','coupon'];

const efhFunding = {
  get() {
    try { return JSON.parse(localStorage.getItem('EFH_FUNDING') || '{}'); }
    catch { return {}; }
  },
  set(obj) {
    localStorage.setItem('EFH_FUNDING', JSON.stringify(obj || {}));
  },
  merge(partial) {
    const cur = this.get();
    const next = { ...cur, ...partial };
    this.set(next);
    return next;
  }
};

// Drawer elements
const voucherId = document.getElementById('efhVoucherId');
const caseMgr   = document.getElementById('efhCaseMgr');
const fundingSrc= document.getElementById('efhFundingSrc');
const coupon    = document.getElementById('efhCoupon');
const saveFunding = document.getElementById('efhSaveFunding');
const fundingMsg  = document.getElementById('efhFundingMsg');

// Load saved funding into fields on open
function loadFundingIntoForm() {
  const f = efhFunding.get();
  voucherId.value = f.voucher_id || '';
  caseMgr.value   = f.case_manager_email || '';
  fundingSrc.value= f.funding_source || '';
  coupon.value    = f.coupon || '';
}

// Call when drawer opens
const _openDrawerOrig = openDrawer;
openDrawer = function() {
  loadFundingIntoForm();
  _openDrawerOrig();
};

// Save funding button
saveFunding?.addEventListener('click', ()=>{
  // basic validation
  const email = caseMgr.value.trim();
  if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    fundingMsg.textContent = 'Case Manager Email looks invalid.';
    return;
  }
  efhFunding.merge({
    voucher_id: voucherId.value.trim(),
    case_manager_email: email || '',
    funding_source: fundingSrc.value,
    coupon: coupon.value.trim()
  });
  fundingMsg.textContent = 'Saved.';
});

// === Merge funding info into ALL efhEnroll calls ===
// If you already declared efhEnroll globally, wrap it. Otherwise define it now.
(function wrapEnroll(){
  const PAY_API = window.PAY_API || "https://pay.elevateforhumanity.org/api/checkout";

  // Keep a reference if it exists
  const prev = window.efhEnroll;

  window.efhEnroll = async function({ programName, priceId="", amountUSD=0, metadata={} }) {
    // attach funding info
    const f = efhFunding.get();
    const fundingMeta = {};
    if (f.voucher_id)          fundingMeta.voucher_id = f.voucher_id;
    if (f.case_manager_email)  fundingMeta.case_manager_email = f.case_manager_email;
    if (f.funding_source)      fundingMeta.funding_source = f.funding_source;
    if (f.coupon)              fundingMeta.coupon = f.coupon;

    const mergedMeta = { ...metadata, ...fundingMeta };

    const body = priceId
      ? { priceId, quantity: 1, metadata: mergedMeta }
      : { productName: programName, unitAmount: Math.round(amountUSD * 100), currency: "usd", quantity: 1, metadata: mergedMeta };

    const res = await fetch(PAY_API, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(body)
    });
    const data = await res.json();
    if (data?.url) window.location.href = data.url;
    else alert(data?.error || "Checkout failed");
  };
})();

What this does

Saves the voucher/case manager/funding source/coupon in localStorage under EFH_FUNDING.

Every efhEnroll({...}) call (from any button on any site) automatically includes these fields in metadata.

Zero change needed to your existing Enroll buttons.



---

3) (Optional) Save to Supabase too

If you want the funding info to follow the user across browsers/devices, also upsert it into the preferences JSON:

Add this after you save funding locally (inside the same click handler), leveraging your Supabase client already created in the drawer:

saveFunding?.addEventListener('click', async ()=>{
  // ...existing validation + efhFunding.merge(...)
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { fundingMsg.textContent = 'Saved locally. Sign in to sync to your account.'; return; }
    const { data: u } = await supabase.from('app_users').select('id').eq('auth_user_id', user.id).single();
    const user_id = u?.id;
    const { data: prefsRow } = await supabase.from('preferences').select('accessibility, locale, email_opt_in').eq('user_id', user_id).maybeSingle();
    const f = efhFunding.get();
    const a11y = prefsRow?.accessibility || {};
    // Store under accessibility.funding or create a new object for custom metadata
    const newA11y = { ...a11y, funding: f };
    await supabase.from('preferences').upsert({
      user_id,
      email_opt_in: prefsRow?.email_opt_in ?? true,
      locale: prefsRow?.locale || 'en-US',
      accessibility: newA11y,
      updated_at: new Date().toISOString()
    });
    fundingMsg.textContent = 'Saved & synced.';
  } catch (e) {
    fundingMsg.textContent = 'Saved locally (sync failed).';
  }
});


---

4) Backend: use the metadata during/after checkout

You already receive session.metadata in your Stripe webhook. Use it to:

honor coupons (if you support internal codes),

attach voucher info to the student record,

auto-notify the case manager on success,

mark enrollment active (as before).


Example (add to your pay backend webhook handler):

case 'checkout.session.completed': {
  const s = event.data.object;

  // Read metadata
  const programSlug = s.metadata?.program_slug || null;
  const voucherId   = s.metadata?.voucher_id || null;
  const caseEmail   = s.metadata?.case_manager_email || null;
  const fundingSrc  = s.metadata?.funding_source || null;
  const coupon      = s.metadata?.coupon || null;

  // 1) Apply internal coupon logic (if you have a coupon table)
  // TODO: validate coupon then adjust accounting as needed

  // 2) Mark Supabase enrollment active (as you already do)
  await markPaidInSupabase({
    email: s.customer_details?.email,
    program_slug: programSlug,
    stripe_customer_id: s.customer || null,
    session_id: s.id
  });

  // 3) (Optional) store voucher/funding on a note or separate table
  // await supaAdmin.from('notes').insert({
  //   user_id: <lookup by email>,
  //   author: 'system',
  //   body: JSON.stringify({ voucherId, caseEmail, fundingSrc, coupon, session_id: s.id })
  // });

  // 4) (Optional) notify case manager
  // sendEmail(caseEmail, `Student enrolled in ${programSlug}`, `Voucher: ${voucherId} ...`);
  break;
}


---

5) You’re ready to roll

The drawer now collects & saves funding info.

Any Enroll button → calls your efhEnroll → auto-includes voucher_id, case_manager_email, funding_source, coupon.

Your Stripe backend receives this metadata to route approvals, apply discounts, and update Supabase.


If you want, I can also add:

a “case manager approval” flow (email link → approves → we flip Supabase enrollments.status to active without payment), or

a coupon validation API so the button shows the discounted price before checkout.


