Awesome — here’s a plug-and-play Replit setup that will always build client/ and serve the React build from client/dist (no more blank root HTML).

1) Root package.json (at the very top of your project)

{
  "name": "efh-root",
  "private": true,
  "type": "module",
  "scripts": {
    "prebuild": "rm -rf client/dist",
    "build": "npm --prefix client install && npm --prefix client run build",
    "start": "node server.mjs",
    "start:dev": "NODE_ENV=development node server.mjs"
  },
  "dependencies": {
    "express": "^4.19.2",
    "sirv": "^2.0.4"
  }
}

2) Root server.mjs

import express from "express";
import path from "path";
import { fileURLToPath } from "url";

// --- resolve __dirname for ESM ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- paths ---
const distPath = path.join(__dirname, "client", "dist");

// --- app ---
const app = express();

// While stabilizing, keep caching low to avoid “old build” issues
app.use(express.static(distPath, {
  etag: false,
  lastModified: false,
  maxAge: 0,
}));

// SPA fallback: send index.html for any unknown route
app.get("*", (_req, res) => {
  res.sendFile(path.join(distPath, "index.html"));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`EFH server running on http://localhost:${PORT}`);
});

3) Root .replit

run = "bash -lc 'npm run build && npm run start'"

4) Root replit.nix

{ pkgs }: {
  deps = [
    pkgs.nodejs_20
    pkgs.nodePackages.npm
  ];
}

5) In client/ make sure you have these

A normal Vite React app (vite, react, react-dom).

package.json with a build script like:


{
  "name": "efh-client",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "vite": "^5.3.0",
    "@vitejs/plugin-react": "^4.2.0"
  }
}

(Optional) In client/index.html, remove any Service Worker registration while you stabilize. If you had code like navigator.serviceWorker.register(...), comment it out in your React entry file for now.



---

How to deploy on Replit (once)

1. Drop these files in the root (same level as client/).


2. Press Run.

Replit will: npm run build (builds the React app inside client/)

then npm run start (serves client/dist with Express)




Quick sanity checks

After it boots, open the webview → DevTools → Console. You should not see 404s for your app scripts, and the page should render.

If you previously had a blank page due to a cached Service Worker on your phone, go to Chrome → Site settings → All sites → elevateforhumanity.org → Clear & reset, then reload.


If you want, I can also add a tiny health log in your React main.tsx so you can confirm the app mounted.

