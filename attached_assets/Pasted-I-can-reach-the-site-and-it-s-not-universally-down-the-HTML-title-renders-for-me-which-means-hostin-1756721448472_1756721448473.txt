I can reach the site and it’s not universally down—the HTML/title renders for me, which means hosting/DNS are fine. That points to a front-end runtime issue on some devices (most likely a cached Service Worker or a JS bundle error during hydration). 

Here’s the fastest way to unstick it and keep it from happening again:

What to do right now (on your device)

1. Hard-refresh & nuke SW cache



In the browser address bar of your site, open DevTools → Console and paste this, then press Enter:


caches.keys().then(keys => Promise.all(keys.map(k => caches.delete(k))));
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.getRegistrations().then(rs => rs.forEach(r => r.unregister()));
}
localStorage.clear(); sessionStorage.clear();
location.reload(true);

On Android Chrome (your phone): Settings → Site settings → All sites → elevateforhumanity.org → Clear & reset.


If the page suddenly appears after that, it was a stale Service Worker / cached blank bundle.

Fix it at the source (Replit / Vite app)

1. Temporarily disable Service Worker registration
Search your project for any of these and remove/comment them out before the next deploy:



// main.tsx or registerServiceWorker.ts
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js'); // ← disable for now
}

2. Make Vite accept your preview host (prevents “blank” dev preview on Replit) Add/update vite.config.ts:



import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/',                       // important for custom domains
  server: {
    host: true,
    allowedHosts: [
      'localhost',
      'www.elevateforhumanity.org',
      'elevateforhumanity.org',
      // add your Replit preview host(s) shown in the error message(s)
      '72c941ff-9f37-41b3-8c1c-65e41adad9d0-00-vrg4qusjwf61.janeway.replit.dev'
    ]
  },
  build: { sourcemap: true }
})

3. Ensure SPA fallback so routes don’t 404/blank
If you’re using a small Node server on Replit, serve index.html for all routes:



// server.js
import express from 'express'
import path from 'path'
const app = express()
const dist = path.join(process.cwd(), 'dist')
app.use(express.static(dist, { maxAge: 0, etag: false })) // no caching while debugging
app.get('*', (_req, res) => res.sendFile(path.join(dist, 'index.html')))
app.listen(process.env.PORT || 3000)

(Then set the Replit run command to build + run this server.)

4. Catch the common “blank page” culprits before deploying



In DevTools → Console on your preview, run:


[...document.scripts].map(s => s.src || 'INLINE')

If you see any old assistant bundles, analytics, or a second React mount script, remove them.

Check for mixed content (http images/scripts on https).

Verify your index.html has only one root <div id="root"> and a single app entry script (e.g., /src/main.tsx).

If you previously inlined a CSP meta tag, relax it while testing (over-strict CSP can block your JS and render a blank page).


5. Force a clean, fresh build



Delete dist/, .vite/, and any generated service-worker*.js files.

Reinstall & rebuild:


rm -rf dist .vite
npm ci
npm run build
npm run start   # or your replit start command

6. Add a tiny sanity check so you know it’s rendering At the top of your app:



console.info('EFH build:', import.meta.env.MODE, Date.now())
document.body.setAttribute('data-efh-mounted','1')

If you don’t see that log or the attribute in Elements → <body>, your JS isn’t running.


---

If you do the quick “clear SW + cache” step and it starts working, keep Service Workers off until the app is stable. Then we can re-enable them with versioned cache keys to avoid this kind of “blank page” lock-in.

