Sweet ‚Äî here‚Äôs a compact ‚ÄúAccount Drawer‚Äù widget you can embed on any page in your ecosystem. It:

works with your Supabase Auth + DB setup,

opens from the right as a slide-out drawer,

shows Sign in (magic link) if logged out,

shows Profile summary + quick edit, and Enrollments if logged in,

is copy-paste (no build, no frameworks).


Just drop this single block near the end of your <body> on any site (www, programs, lms, connect).


---

üî© Embed this once per page

> Replace the two placeholders with your Supabase project values: SUPABASE_URL, SUPABASE_ANON_KEY



<!-- EFH ACCOUNT DRAWER (drop-in) -->
<style>
  :root { --efh-r: 14px; --efh-ink:#111; --efh-muted:#666; --efh-line:#ececec; }
  .efh-ac-btn{position:fixed;right:16px;bottom:16px;z-index:9999;padding:10px 14px;border:1px solid var(--efh-ink);border-radius:999px;background:#fff;cursor:pointer}
  .efh-ac-backdrop{position:fixed;inset:0;background:rgba(0,0,0,.28);backdrop-filter:saturate(90%) blur(1px);opacity:0;pointer-events:none;transition:.2s ease;z-index:9998}
  .efh-ac-wrap{position:fixed;top:0;right:0;height:100%;width:min(420px, 96vw);background:#fff;border-left:1px solid var(--efh-line);box-shadow:-12px 0 40px rgba(0,0,0,.08);transform:translateX(100%);transition:transform .25s ease;z-index:9999;display:flex;flex-direction:column}
  .efh-ac-head{display:flex;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid var(--efh-line)}
  .efh-ac-title{font-weight:800}
  .efh-ac-close{border:1px solid var(--efh-line);background:#fff;border-radius:10px;padding:6px 9px;cursor:pointer}
  .efh-ac-body{padding:14px;overflow:auto}
  .efh-row{display:grid;gap:8px}
  .efh-row-2{grid-template-columns:1fr 1fr}
  .efh-input, .efh-select, .efh-textarea{width:100%;padding:10px;border:1px solid var(--efh-line);border-radius:12px}
  .efh-btn{padding:9px 12px;border:1px solid var(--efh-ink);border-radius:12px;background:#fff;cursor:pointer}
  .efh-muted{color:var(--efh-muted)} .efh-hint{font-size:12px;color:#777}
  .efh-card{border:1px solid var(--efh-line);border-radius:var(--efh-r);padding:12px;background:#fff;margin-bottom:12px}
  .efh-list{margin:0;padding-left:18px}
  @media (max-width: 480px){ .efh-row-2{grid-template-columns:1fr} }
  /* open state */
  .efh-ac-open .efh-ac-backdrop{opacity:1;pointer-events:auto}
  .efh-ac-open .efh-ac-wrap{transform:translateX(0)}
</style>

<button class="efh-ac-btn" id="efhAcOpen" aria-haspopup="dialog" aria-controls="efhAcWrap">Account</button>
<div class="efh-ac-backdrop" id="efhAcBackdrop" hidden></div>

<aside class="efh-ac-wrap" id="efhAcWrap" role="dialog" aria-modal="true" aria-labelledby="efhAcTitle" hidden>
  <div class="efh-ac-head">
    <div class="efh-ac-title" id="efhAcTitle">My Account</div>
    <button class="efh-ac-close" id="efhAcClose" aria-label="Close">‚úï</button>
  </div>
  <div class="efh-ac-body">
    <!-- Auth panel -->
    <section id="efhAuth" class="efh-card" hidden>
      <h3>Sign in</h3>
      <p class="efh-muted">Get a one-time magic link via email.</p>
      <div class="efh-row efh-row-2">
        <input id="efhEmail" class="efh-input" type="email" placeholder="you@example.com" autocomplete="email"/>
        <button id="efhSend" class="efh-btn">Send Link</button>
      </div>
      <p id="efhAuthMsg" class="efh-hint"></p>
    </section>

    <!-- Account panel -->
    <section id="efhAcct" hidden>
      <!-- Whoami -->
      <div class="efh-card">
        <div id="efhWho" class="efh-muted">Loading‚Ä¶</div>
      </div>

      <!-- Profile -->
      <div class="efh-card">
        <h3>Profile</h3>
        <div class="efh-row efh-row-2">
          <input id="efhFirst" class="efh-input" placeholder="First name"/>
          <input id="efhLast" class="efh-input" placeholder="Last name"/>
        </div>
        <div class="efh-row efh-row-2" style="margin-top:8px">
          <input id="efhPhone" class="efh-input" placeholder="(###) ###-####"/>
          <select id="efhLocale" class="efh-select">
            <option value="en-US">English (US)</option>
            <option value="en-GB">English (UK)</option>
            <option value="es-ES">Espa√±ol</option>
          </select>
        </div>
        <textarea id="efhAddr" class="efh-textarea" rows="3" placeholder='{"street":"...","city":"...","state":"IN","zip":"..."}' style="margin-top:8px"></textarea>
        <div class="efh-row" style="margin-top:8px">
          <button id="efhSaveProfile" class="efh-btn">Save Profile</button>
          <span id="efhProfileMsg" class="efh-hint"></span>
        </div>
      </div>

      <!-- Preferences -->
      <div class="efh-card">
        <h3>Preferences</h3>
        <label><input type="checkbox" id="efhOptIn" checked/> Email updates and reminders</label>
        <textarea id="efhA11y" class="efh-textarea" rows="3" placeholder='{"fontScale":1,"highContrast":false}' style="margin-top:8px"></textarea>
        <div class="efh-row" style="margin-top:8px">
          <button id="efhSavePrefs" class="efh-btn">Save Preferences</button>
          <span id="efhPrefsMsg" class="efh-hint"></span>
        </div>
      </div>

      <!-- Enrollments -->
      <div class="efh-card">
        <h3>My Enrollments</h3>
        <ul id="efhEnrollList" class="efh-list efh-muted"><li>Loading‚Ä¶</li></ul>
      </div>

      <div class="efh-row" style="margin-top:8px;display:flex;gap:8px;align-items:center">
        <button id="efhSignOut" class="efh-btn">Sign out</button>
      </div>
    </section>
  </div>
</aside>

<script type="module">
  import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

  // TODO: replace with your values
  const SUPABASE_URL = 'https://YOUR-PROJECT.supabase.co';
  const SUPABASE_ANON_KEY = 'YOUR_PUBLIC_ANON_KEY';

  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { auth: { persistSession: true, storage: localStorage } });

  // Elements
  const root = document.documentElement;
  const btnOpen = document.getElementById('efhAcOpen');
  const backdrop = document.getElementById('efhAcBackdrop');
  const wrap = document.getElementById('efhAcWrap');
  const btnClose = document.getElementById('efhAcClose');

  const authSec = document.getElementById('efhAuth');
  const acctSec = document.getElementById('efhAcct');
  const emailEl = document.getElementById('efhEmail');
  const sendBtn = document.getElementById('efhSend');
  const authMsg = document.getElementById('efhAuthMsg');

  const who = document.getElementById('efhWho');
  const first = document.getElementById('efhFirst');
  const last = document.getElementById('efhLast');
  const phone = document.getElementById('efhPhone');
  const locale = document.getElementById('efhLocale');
  const addr = document.getElementById('efhAddr');
  const saveProf = document.getElementById('efhSaveProfile');
  const profMsg = document.getElementById('efhProfileMsg');

  const optIn = document.getElementById('efhOptIn');
  const a11y = document.getElementById('efhA11y');
  const savePrefs = document.getElementById('efhSavePrefs');
  const prefsMsg = document.getElementById('efhPrefsMsg');

  const enrollList = document.getElementById('efhEnrollList');
  const signOut = document.getElementById('efhSignOut');

  // Open/close drawer
  function openDrawer() {
    root.classList.add('efh-ac-open');
    backdrop.hidden = false; wrap.hidden = false;
    setTimeout(()=> emailEl?.focus(), 50);
  }
  function closeDrawer() {
    root.classList.remove('efh-ac-open');
    backdrop.hidden = true; wrap.hidden = true;
  }
  btnOpen.addEventListener('click', openDrawer);
  btnClose.addEventListener('click', closeDrawer);
  backdrop.addEventListener('click', closeDrawer);
  document.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeDrawer(); });

  // Helpers
  async function ensureAppUser(user) {
    await supabase.from('app_users').upsert({ auth_user_id: user.id, email: user.email }, { onConflict: 'auth_user_id' });
    const row = await supabase.from('app_users').select('id').eq('auth_user_id', user.id).single();
    return row.data?.id || null;
  }
  async function loadProfile(user_id) {
    const { data: prof } = await supabase.from('profiles').select('*').eq('user_id', user_id).maybeSingle();
    const { data: prefs } = await supabase.from('preferences').select('*').eq('user_id', user_id).maybeSingle();
    if (prof) { first.value = prof.first_name||''; last.value = prof.last_name||''; phone.value = prof.phone||''; addr.value = prof.address ? JSON.stringify(prof.address) : ''; }
    if (prefs) { optIn.checked = prefs.email_opt_in ?? true; locale.value = prefs.locale||'en-US'; a11y.value = prefs.accessibility ? JSON.stringify(prefs.accessibility) : ''; }
  }
  async function loadEnrollments() {
    const { data, error } = await supabase.from('enrollments').select('program_slug,status,started_at,completed_at').order('created_at', { ascending:false });
    if (error) { enrollList.innerHTML = `<li>${error.message}</li>`; return; }
    if (!data?.length) { enrollList.innerHTML = `<li class="efh-muted">No enrollments yet.</li>`; return; }
    enrollList.innerHTML = data.map(e=>{
      const started = e.started_at ? new Date(e.started_at).toLocaleDateString() : '‚Äî';
      const done = e.completed_at ? `, completed ${new Date(e.completed_at).toLocaleDateString()}` : '';
      return `<li><strong>${e.program_slug}</strong> ‚Äî ${e.status} (started ${started}${done})</li>`;
    }).join('');
  }

  // Auth flow
  async function refreshUI() {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      authSec.hidden = false; acctSec.hidden = true; who.textContent = 'Not signed in.'; return;
    }
    authSec.hidden = true; acctSec.hidden = false;
    who.textContent = `Signed in as ${user.email}`;
    const user_id = await ensureAppUser(user);
    await loadProfile(user_id);
    await loadEnrollments();
  }

  sendBtn.addEventListener('click', async ()=>{
    const email = emailEl.value.trim();
    if (!email) { authMsg.textContent = 'Enter your email.'; return; }
    sendBtn.disabled = true; authMsg.textContent = 'Sending‚Ä¶';
    const { error } = await supabase.auth.signInWithOtp({ email });
    sendBtn.disabled = false;
    authMsg.textContent = error ? error.message : 'Check your email for the sign-in link.';
  });

  saveProf.addEventListener('click', async ()=>{
    profMsg.textContent = 'Saving‚Ä¶';
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;
    const { data: u } = await supabase.from('app_users').select('id').eq('auth_user_id', user.id).single();
    let address = null;
    if (addr.value.trim()) { try { address = JSON.parse(addr.value); } catch { profMsg.textContent = 'Address must be JSON'; return; } }
    const { error } = await supabase.from('profiles').upsert({
      user_id: u.id, first_name:first.value.trim(), last_name:last.value.trim(),
      phone:phone.value.trim(), address, updated_at: new Date().toISOString()
    });
    profMsg.textContent = error ? error.message : 'Saved.';
  });

  savePrefs.addEventListener('click', async ()=>{
    prefsMsg.textContent = 'Saving‚Ä¶';
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;
    const { data: u } = await supabase.from('app_users').select('id').eq('auth_user_id', user.id).single();
    let accessibility = null;
    if (a11y.value.trim()) { try { accessibility = JSON.parse(a11y.value); } catch { prefsMsg.textContent = 'Accessibility must be JSON'; return; } }
    const { error } = await supabase.from('preferences').upsert({
      user_id: u.id, email_opt_in: !!optIn.checked, locale: locale.value, accessibility, updated_at: new Date().toISOString()
    });
    prefsMsg.textContent = error ? error.message : 'Saved.';
  });

  signOut.addEventListener('click', async ()=>{ await supabase.auth.signOut(); await refreshUI(); });

  // Initialize
  await refreshUI();
</script>
<!-- /EFH ACCOUNT DRAWER -->


---

‚úÖ How to use

1. Paste the block near the end of your page (before </body>).


2. Replace SUPABASE_URL and SUPABASE_ANON_KEY.


3. The floating ‚ÄúAccount‚Äù button appears at bottom-right.

Click ‚Üí drawer opens.

If logged out, enter email ‚Üí receives magic link.

If logged in, you‚Äôll see Profile, Preferences, and Enrollments synced from your shared DB.




Optional tweaks

To show a top-nav ‚ÄúAccount‚Äù link that opens the same drawer, add:

<a href="#" onclick="document.getElementById('efhAcOpen').click();return false;">Account</a>

Change z-index by editing .efh-ac-btn, .efh-ac-backdrop, .efh-ac-wrap (currently ~9998+).

If you use a strict Content Security Policy, allow https://esm.sh and your Supabase domain for scripts/XHR.



---

If you want, I can also make the drawer display a specific program voucher or coupon field during checkout, and pass it into your Stripe metadata ‚Äî just say the fields you need (e.g., voucher ID, case manager email), and I‚Äôll extend this widget.

