Sweetâ€”letâ€™s make the logs spell it out every time ðŸš¦

Here are tiny changes so your server prints whether the last build was quick or clean. It works two ways:

A small marker file the build scripts write (.buildmode-quick or .buildmode-clean)

An env var override (RUN_MODE=quick|clean) if you ever want to force it


1) Update client/package.json (add markers)

{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",

    "preclean": "rm -f ../.buildmode-quick && echo clean > ../.buildmode-clean",
    "clean": "rm -rf node_modules dist package-lock.json && npm install && npm run build",

    "prequick": "rm -f ../.buildmode-clean && echo quick > ../.buildmode-quick",
    "quick": "rm -rf dist && npm run build"
  }
}

2) Update root .replit (default to fast build + label it)

run = "bash -lc 'export RUN_MODE=quick && cd client && npm run quick && cd .. && npm run start'"

3) Update root server.mjs to read the mode and log it

import express from "express";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const distPath = path.join(__dirname, "client", "dist");

// --- Read build mode from env or marker files ---
function detectBuildMode() {
  if (process.env.RUN_MODE) return process.env.RUN_MODE;
  const quick = path.join(__dirname, ".buildmode-quick");
  const clean = path.join(__dirname, ".buildmode-clean");
  if (fs.existsSync(clean)) return "clean";
  if (fs.existsSync(quick)) return "quick";
  return "unknown";
}
const buildMode = detectBuildMode();

console.log(
  `EFH server starting | build mode: ${buildMode} | ${new Date().toISOString()}`
);

// Serve React build
app.use(express.static(distPath, { etag: false, lastModified: false, maxAge: 0 }));

// Health check (includes build mode)
app.get("/health", (_req, res) => {
  res.json({
    status: "healthy",
    mode: buildMode,
    timestamp: new Date().toISOString(),
    port: process.env.PORT || 5000,
    ready: true
  });
});

// SPA fallback
app.get("*", (_req, res) => res.sendFile(path.join(distPath, "index.html")));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`EFH server running at http://localhost:${PORT}`);
});

4) When you want a full reset

cd client
npm run clean
cd ..
RUN_MODE=clean npm run start     # (optional; marker already covers it)

5) What youâ€™ll see in logs

On normal Run button: EFH server starting | build mode: quick | ...

After npm run clean: EFH server starting | build mode: clean | ...


If you want, I can also have the /health endpoint show the Tailwind status (OK/NOT loaded) alongside modeâ€”just say the word.

