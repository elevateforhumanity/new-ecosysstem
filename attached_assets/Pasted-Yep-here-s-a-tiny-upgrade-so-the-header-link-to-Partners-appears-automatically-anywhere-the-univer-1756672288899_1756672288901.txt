Yep—here’s a tiny upgrade so the header link to “Partners” appears automatically anywhere the universal script runs if a valid partners.json is available. You don’t have to touch header.html.

Drop-in file (brain site)

Save as: /scripts/efh-universal.v2.1.js

(() => {
  const $ = (sel, root = document) => root.querySelector(sel);

  // Read config from <script ...data-*> attributes
  const thisScript = document.currentScript || [...document.scripts].slice(-1)[0];
  const ASSETS = thisScript?.dataset?.assets || '';
  const PAY_API = thisScript?.dataset?.payapi || '';
  const PROGRAMS_PATH = thisScript?.dataset?.programs || '/config/health-programs.json';
  const PARTNERS_PATH = thisScript?.dataset?.partners || ''; // optional
  const DEFAULT_TAB = thisScript?.dataset?.activeTab || 'state-funded';

  const ABS = (p) => /^https?:\/\//i.test(p) ? p : (ASSETS.replace(/\/$/, '') + '/' + p.replace(/^\//, ''));

  async function fetchText(path) {
    const res = await fetch(path, { cache: 'no-store' });
    if (!res.ok) return '';
    return res.text();
  }
  async function fetchJSON(path) {
    const res = await fetch(path, { cache: 'no-store' });
    if (!res.ok) throw new Error('Not found: ' + path);
    return res.json();
  }

  // Insert shared header/footer if placeholders exist
  async function injectChrome() {
    const hdrHost = $('#efh-header');
    const ftrHost = $('#efh-footer');
    if (!hdrHost && !ftrHost) return;

    const [hdr, ftr] = await Promise.all([
      fetchText(ABS('ui/header.html')),
      fetchText(ABS('ui/footer.html')),
    ]);

    if (hdr && hdrHost) hdrHost.innerHTML = hdr;
    if (ftr && ftrHost) ftrHost.innerHTML = ftr;
  }

  // Load programs + partners (partners optional)
  async function loadData() {
    const programsUrl = /^https?:\/\//i.test(PROGRAMS_PATH) ? PROGRAMS_PATH : ABS(PROGRAMS_PATH.replace(/^\//, ''));
    const partnersUrl = PARTNERS_PATH
      ? (/^https?:\/\//i.test(PARTNERS_PATH) ? PARTNERS_PATH : ABS(PARTNERS_PATH.replace(/^\//, '')))
      : '';

    const [programs, partners] = await Promise.allSettled([
      fetchJSON(programsUrl),
      partnersUrl ? fetchJSON(partnersUrl) : Promise.resolve([])
    ]);

    return {
      programs: programs.status === 'fulfilled' ? programs.value : [],
      partners: partners.status === 'fulfilled' ? partners.value : []
    };
  }

  // Add a Partners link to the injected header, only if partners exist and a link isn't there yet
  function ensurePartnersLink(hasPartners) {
    if (!hasPartners) return;
    // look for an existing link first
    const already = document.querySelector('a[href$="/partners"], a[href="/partners"]');
    if (already) return;

    // find a reasonable container: first .efh-header or first <nav> inside the header block
    const headerRoot = $('#efh-header');
    if (!headerRoot) return;

    let nav = headerRoot.querySelector('.efh-header') || headerRoot.querySelector('nav');
    if (!nav) {
      // fallback: create a simple nav bar if header had no nav
      nav = document.createElement('nav');
      nav.className = 'efh-header';
      headerRoot.appendChild(nav);
    }

    const link = document.createElement('a');
    link.href = '/partners';
    link.textContent = 'Partners';
    link.style.marginLeft = '8px';

    nav.appendChild(link);
  }

  // Enrollment (Stripe Checkout). No prices displayed; optional partner split passed through.
  async function enrollStripe(program, fundingMemory = {}) {
    if (!PAY_API) return alert('Checkout unavailable.');
    const body = program.stripe_price_id
      ? {
          priceId: program.stripe_price_id,
          quantity: 1,
          metadata: { program_slug: program.slug, program: program.name, ...fundingMemory },
          partner_connect_acc: program.partner_connect_acc || ''
        }
      : {
          productName: program.name,
          unitAmount: 0,
          currency: 'usd',
          quantity: 1,
          metadata: { program_slug: program.slug, program: program.name, ...fundingMemory },
          partner_connect_acc: program.partner_connect_acc || ''
        };

    const res = await fetch(PAY_API, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify(body)
    }).catch(() => null);

    if (!res) return alert('Network error.');
    const data = await res.json().catch(() => ({}));
    if (data?.url) location.href = data.url;
    else alert(data?.error || 'Checkout failed');
  }

  // Render Programs + optional Partners tab
  function renderApp({ programs, partners }) {
    const host = $('#efh-programs');
    const hasPartners = Array.isArray(partners) && partners.length > 0;

    // auto add Partners link in header if we have partners
    ensurePartnersLink(hasPartners);

    if (!host) return;

    host.innerHTML = `
      <section class="efh-wrap">
        <header class="efh-row">
          <h2 class="efh-title">Healthcare Programs</h2>
          <nav class="efh-tabs">
            <button data-tab="state-funded">State-Funded</button>
            <button data-tab="open-enrollment">Open Enrollment</button>
            ${hasPartners ? `<button data-tab="partners">Partners</button>` : ``}
          </nav>
        </header>
        <p class="efh-muted efh-hint">State-funded programs support WIOA, WRG, WEX, JRI, OJT. Use the Portal for secure documents.</p>
        <div id="efh-cards" class="efh-cards"></div>
      </section>
      <style>
        .efh-wrap{max-width:1180px;margin:0 auto;padding:24px 16px;font-family:system-ui,Arial}
        .efh-row{display:flex;gap:10px;align-items:center;justify-content:space-between;flex-wrap:wrap}
        .efh-title{margin:.2em 0}
        .efh-tabs{display:flex;gap:6px}
        .efh-tabs button{padding:9px 12px;border:1px solid #111;border-radius:12px;background:#fff;cursor:pointer}
        .efh-tabs button[aria-selected="true"]{background:#f5f5f5}
        .efh-muted{color:#666}
        .efh-cards{display:grid;gap:14px;grid-template-columns:repeat(auto-fit,minmax(280px,1fr))}
        .efh-card{border:1px solid #ececec;border-radius:14px;background:#fff;padding:16px}
        .efh-pill{display:inline-block;padding:3px 8px;border:1px solid #ddd;border-radius:999px;font-size:12px;margin-right:6px}
        .efh-btn{padding:9px 12px;border:1px solid #111;border-radius:12px;background:#fff;cursor:pointer}
        .efh-tag{display:inline-block;font-size:12px;padding:2px 6px;border:1px solid #ddd;border-radius:6px;margin-right:6px}
        .efh-kv{font-size:13px;color:#555}
        .efh-kv b{color:#222}
      </style>
    `;

    const tabs = host.querySelectorAll('.efh-tabs button');
    const cards = $('#efh-cards', host);

    const Funding = { get(){ try { return JSON.parse(localStorage.getItem('EFH_FUNDING') || '{}'); } catch { return {}; } } };

    let tab = DEFAULT_TAB;
    if (location.hash === '#state-funded' || location.hash === '#open-enrollment' || location.hash === '#partners') {
      tab = location.hash.replace('#', '');
    }

    function drawPrograms(which) {
      const list = programs.filter(p => which === 'state-funded' ? p.track === 'state-funded' : p.track !== 'state-funded');
      cards.innerHTML = list.map(p => `
        <article class="efh-card" id="${p.slug}">
          <h3 style="margin:0">${p.name}</h3>
          ${Array.isArray(p.funding) && p.funding.length ? `<div style="margin:6px 0">${p.funding.map(x=>`<span class="efh-pill">${x}</span>`).join('')}</div>` : ''}
          <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:8px">
            ${p.google_form_url
              ? `<a class="efh-btn" target="_blank" rel="noopener" href="${p.google_form_url}">Enroll (Funding Form)</a>`
              : `<button class="efh-btn" data-enroll="${p.slug}">Enroll</button>`
            }
            <a class="efh-btn" href="/portal">Portal</a>
          </div>
        </article>
      `).join('');

      cards.querySelectorAll('[data-enroll]').forEach(btn => {
        btn.addEventListener('click', () => {
          const slug = btn.getAttribute('data-enroll');
          const program = programs.find(p => p.slug === slug);
          enrollStripe(program, Funding.get());
        });
      });
    }

    function drawPartners() {
      if (!hasPartners) { cards.innerHTML = `<p class="efh-muted">No partners listed yet.</p>`; return; }
      cards.innerHTML = partners.map(pr => `
        <article class="efh-card">
          <h3 style="margin:0">${pr.name || 'Partner'}</h3>
          <p style="margin:6px 0 10px 0">
            ${pr.type ? `<span class="efh-tag">${pr.type}</span>` : ''}
            ${pr.role ? `<span class="efh-tag">${pr.role}</span>` : ''}
          </p>
          <div class="efh-kv">
            ${pr.contact ? `<div><b>Contact:</b> ${pr.contact}</div>` : ''}
            ${pr.website ? `<div><b>Website:</b> <a target="_blank" rel="noopener" href="${pr.website}">${pr.website}</a></div>` : ''}
            ${pr.connect_acc ? `<div><b>Stripe Connect:</b> ${pr.connect_acc}</div>` : ''}
          </div>
        </article>
      `).join('');
    }

    function draw() {
      tabs.forEach(b => b.setAttribute('aria-selected', b.dataset.tab === tab ? 'true' : 'false'));
      if (tab === 'partners') drawPartners();
      else drawPrograms(tab);
    }

    tabs.forEach(b => b.addEventListener('click', () => { tab = b.dataset.tab; draw(); }));
    draw();
  }

  // Boot
  (async () => {
    try { await injectChrome(); } catch (e) { console.warn('EFH: header/footer not injected', e); }
    try {
      const data = await loadData();
      renderApp(data);
    } catch (e) {
      if ($('#efh-programs')) $('#efh-programs').innerHTML = `<p class="efh-muted" style="padding:16px">Programs unavailable right now.</p>`;
    }
  })();
})();

How to use it on each site

Replace your script tag with v2.1 and add data-partners:

<div id="efh-header"></div>
<div id="efh-programs"></div>
<div id="efh-footer"></div>

<script src="https://assets.elevateforhumanity.org/scripts/efh-universal.v2.1.js"
        data-assets="https://assets.elevateforhumanity.org"
        data-payapi="https://pay.elevateforhumanity.org/api/checkout"
        data-programs="/config/health-programs.json"
        data-partners="/config/partners.json"
        data-active-tab="state-funded"
        defer></script>

What this gives you

If partners.json loads with at least one entry:

The Programs grid shows a Partners tab.

The header automatically gets a Partners link (appended to your header nav) without editing header.html.


If partners.json is missing/empty:

No Partners tab, no header link. Everything else works.



If you want, I can also bundle this v2.1 file into a zip so you can upload it to your brain site in one go.

