Absolutely—here’s a plug-and-play script that integrates your LMS with the rest of your ecosystem inside your current Replit project:

Extends your database with Products, Orders, Partners, Pages (for basic CMS).

Adds APIs for product catalog, checkout (Stripe-ready), partner directory, and WIOA/CSV export.

Creates simple pages/UI (Next.js or Vite/React auto-detected).

Seeds demo products & partners so it works immediately.



---

1) Create the script in your Replit shell

cat > efh_integrate_ecosystem.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

echo "==> Detecting stack…"
IS_NEXT="false"
if [ -f package.json ] && grep -q '"next"' package.json; then IS_NEXT="true"; fi
echo "   Detected: $([ "$IS_NEXT" = "true" ] && echo Next.js || echo Vite/React + Express)"

# ---------- ENV ----------
touch .env.example
grep -q '^STRIPE_PUBLIC_KEY=' .env.example || echo 'STRIPE_PUBLIC_KEY=pk_live_or_test_...' >> .env.example
grep -q '^STRIPE_SECRET_KEY=' .env.example || echo 'STRIPE_SECRET_KEY=sk_live_or_test_...' >> .env.example
grep -q '^SITE_NAME=' .env.example || echo 'SITE_NAME=Elevate for Humanity' >> .env.example

# ---------- Ensure Prisma exists ----------
if [ ! -d prisma ] || [ ! -f prisma/schema.prisma ]; then
  echo "ERROR: Prisma schema not found. Run your LMS upgrade script first (efh_upgrade.sh)."
  exit 1
fi

# ---------- Append models to Prisma if missing ----------
add_model_if_missing () {
  local name="$1"
  local block="$2"
  if ! grep -q "model[[:space:]]\+$name[[:space:]]*{" prisma/schema.prisma; then
    printf "\n%s\n" "$block" >> prisma/schema.prisma
    echo "   + Added model: $name"
  else
    echo "   = Model $name already present"
  fi
}

add_enum_if_missing () {
  local name="$1"
  local block="$2"
  if ! grep -q "enum[[:space:]]\+$name[[:space:]]*{" prisma/schema.prisma; then
    printf "\n%s\n" "$block" >> prisma/schema.prisma
    echo "   + Added enum: $name"
  else
    echo "   = Enum $name already present"
  fi
}

# Enums
add_enum_if_missing "OrderStatus" 'enum OrderStatus { PENDING PAID FAILED REFUNDED }'

# Models
add_model_if_missing "Product" 'model Product {
  id        String   @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String   @unique
  price     Int      @default(0)  // cents
  image     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}'

add_model_if_missing "Order" 'model Order {
  id               String   @id @default(cuid())
  userId           String?
  user             User?    @relation(fields: [userId], references: [id])
  total            Int      @default(0)
  status           OrderStatus @default(PENDING)
  stripeSessionId  String?
  createdAt        DateTime @default(now())
}'

add_model_if_missing "Partner" 'model Partner {
  id        String   @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id])
  name      String
  category  String
  city      String?
  state     String?
  email     String?
  phone     String?
  url       String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}'

add_model_if_missing "Page" 'model Page {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String?
  published Boolean  @default(false)
  updatedAt DateTime @updatedAt
}'

echo "==> Installing server deps (Stripe + CSV)…"
npm i -S stripe papaparse || true

echo "==> Generating Prisma client & applying DB changes…"
npx prisma generate >/dev/null
npx prisma db push

# ---------- Seed demo data ----------
echo "==> Seeding demo products & partners…"
node - <<'JS'
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
const run = async () => {
  const org = await prisma.organization.upsert({
    where: { slug: 'elevate' },
    update: {},
    create: { slug: 'elevate', name: 'Elevate For Humanity' }
  })
  await prisma.product.upsert({
    where: { slug: 'cpr-certification' },
    update: { active: true },
    create: { slug: 'cpr-certification', title: 'CPR Certification', price: 7500, orgId: org.id }
  })
  await prisma.product.upsert({
    where: { slug: 'barbering-foundations' },
    update: { active: true },
    create: { slug: 'barbering-foundations', title: 'Barbering Foundations', price: 29900, orgId: org.id }
  })
  await prisma.partner.upsert({
    where: { id: 'seed-partner-1' },
    update: {},
    create: { id: 'seed-partner-1', name: 'City Workforce Alliance', category: 'Workforce Board', approved: true, url: 'https://example.org', orgId: org.id }
  })
  await prisma.page.upsert({
    where: { slug: 'about' },
    update: { title: 'About Elevate', published: true },
    create: { slug: 'about', title: 'About Elevate', content: 'Mission, impact, and programs.', published: true }
  })
  console.log('Seed complete')
}
run().then(()=>process.exit(0))
JS

# ---------- API (per stack) ----------
if [ "$IS_NEXT" = "true" ]; then
  mkdir -p lib pages/api/eco pages/market pages/partners pages/admin
  # prisma helper for Next (if not present)
  if [ ! -f lib/prisma.js ]; then
cat > lib/prisma.js <<'J'
import { PrismaClient } from '@prisma/client'
const g = globalThis; export const prisma = g.prisma || new PrismaClient()
if (process.env.NODE_ENV !== 'production') g.prisma = prisma
J
  fi

  # Products & Partners APIs
  cat > pages/api/eco/products.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(_req,res){
  const items = await prisma.product.findMany({ where:{active:true}, select:{slug:true,title:true,price:true,image:true}})
  res.json(items)
}
J

  cat > pages/api/eco/partners.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(req,res){
  if(req.method==='GET'){
    const items = await prisma.partner.findMany({ where:{approved:true}, select:{name:true,category:true,city:true,state:true,url:true}})
    return res.json(items)
  }
  if(req.method==='POST'){
    const {name,category,city,state,email,phone,url} = req.body||{}
    const p = await prisma.partner.create({data:{name,category,city,state,email,phone,url,approved:false}})
    return res.json(p)
  }
  res.status(405).end()
}
J

  # Stripe checkout (creates session if key is set; otherwise returns 400)
  cat > pages/api/eco/checkout.js <<'J'
export default async function handler(req,res){
  const {product,qty=1} = req.body||{}
  const key = process.env.STRIPE_SECRET_KEY
  if(!key) return res.status(400).json({error:'Stripe not configured'})
  const stripe = (await import('stripe')).default(key)
  // Normally lookup product/price from DB; simple dynamic amount example:
  // You can switch to Price IDs later for recurring/subscriptions.
  const amount = Number(req.body.amount || 0)
  if(!amount) return res.status(400).json({error:'amount required'})
  const session = await stripe.checkout.sessions.create({
    mode:'payment',
    payment_method_types:['card'],
    line_items:[{ price_data:{currency:'usd',product_data:{name:product||'EFH Item'},unit_amount:amount}, quantity:qty }],
    success_url: req.headers.origin + '/thank-you',
    cancel_url: req.headers.origin + '/market?canceled=1'
  })
  res.json({checkoutUrl: session.url})
}
J

  # WIOA export (CSV)
  cat > pages/api/eco/wioa-export.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(_req,res){
  const rows = await prisma.enrollment.findMany({ include:{ user:true, course:true } })
  const header = 'user_email,course_slug,progress,status,createdAt'
  const body = rows.map(r=>[r.user.email,r.course.slug,r.progress,r.status,r.createdAt.toISOString()].join(',')).join('\n')
  const csv = header + '\n' + body
  res.setHeader('Content-Type','text/csv')
  res.setHeader('Content-Disposition','attachment; filename="wioa-export.csv"')
  res.send(csv)
}
J

  # Simple pages
  cat > pages/market/index.js <<'J'
import { useEffect, useState } from 'react'
export default function Market(){
  const [items,setItems]=useState([]); useEffect(()=>{ fetch('/api/eco/products').then(r=>r.json()).then(setItems) },[])
  const buy = async (slug,price)=>{ 
    const r = await fetch('/api/eco/checkout',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({product:slug,amount:price})})
    const j = await r.json(); if(j.checkoutUrl) location.href=j.checkoutUrl; else alert(j.error||'Checkout error')
  }
  return (<main style={{padding:32}}>
    <h1>Marketplace</h1>
    <ul>{items.map(x=><li key={x.slug} style={{margin:'12px 0'}}>
      <b>{x.title}</b> — ${(x.price/100).toFixed(2)} <button onClick={()=>buy(x.slug,x.price)} style={{marginLeft:8}}>Buy</button>
    </li>)}</ul>
  </main>)
}
J

  cat > pages/partners/index.js <<'J'
import { useEffect,useState } from 'react'
export default function Partners(){
  const [items,setItems]=useState([]); useEffect(()=>{ fetch('/api/eco/partners').then(r=>r.json()).then(setItems)},[])
  return (<main style={{padding:32}}>
    <h1>Partners Directory</h1>
    <ul>{items.map((p,i)=><li key={i}><b>{p.name}</b> — {p.category} {p.city?`• ${p.city}`:''} {p.url?`• ${p.url}`:''}</li>)}</ul>
  </main>)
}
J

  cat > pages/admin/index.js <<'J'
export default function Admin(){return(<main style={{padding:32}}>
  <h1>Admin (Ecosystem)</h1>
  <ul>
    <li><a href="/market">Products</a></li>
    <li><a href="/partners">Partners</a></li>
    <li><a href="/analytics">Analytics</a></li>
  </ul>
</main>)}
J

else
  # ---------- Vite/React + Express ----------
  mkdir -p routes src/pages

  # Eco API (Express)
  cat > routes/eco.js <<'J'
import { Router } from 'express'
import { prisma } from '../lib/prisma.js'
import StripeLib from 'stripe'
const router = Router()

router.get('/products', async (_req,res)=>{
  const items = await prisma.product.findMany({ where:{active:true}, select:{slug:true,title:true,price:true,image:true}})
  res.json(items)
})

router.get('/partners', async (_req,res)=>{
  const items = await prisma.partner.findMany({ where:{approved:true}, select:{name:true,category:true,city:true,state:true,url:true}})
  res.json(items)
})

router.post('/partners', async (req,res)=>{
  const {name,category,city,state,email,phone,url} = req.body||{}
  const p = await prisma.partner.create({data:{name,category,city,state,email,phone,url,approved:false}})
  res.json(p)
})

router.post('/checkout', async (req,res)=>{
  const key = process.env.STRIPE_SECRET_KEY
  if(!key) return res.status(400).json({error:'Stripe not configured'})
  const stripe = new StripeLib(key)
  const {product='EFH Item', amount=0, qty=1} = req.body||{}
  if(!amount) return res.status(400).json({error:'amount required'})
  const session = await stripe.checkout.sessions.create({
    mode:'payment',
    payment_method_types:['card'],
    line_items:[{ price_data:{currency:'usd',product_data:{name:product},unit_amount:Number(amount)}, quantity:Number(qty) }],
    success_url: (req.headers.origin||'') + '/#/thank-you',
    cancel_url: (req.headers.origin||'') + '/#/market?canceled=1'
  })
  res.json({checkoutUrl: session.url})
})

router.get('/wioa-export.csv', async (_req,res)=>{
  const rows = await prisma.enrollment.findMany({ include:{ user:true, course:true } })
  const header = 'user_email,course_slug,progress,status,createdAt'
  const body = rows.map(r=>[r.user.email,r.course.slug,r.progress,r.status,r.createdAt.toISOString()].join(',')).join('\n')
  res.set('Content-Type','text/csv'); res.set('Content-Disposition','attachment; filename="wioa-export.csv"')
  res.send(header+'\n'+body)
})

export { router }
J

  # Wire into server.js
  grep -q "routes/eco.js" server.js || sed -i "s|app.use('/api', apiRouter)|app.use('/api', apiRouter)\nimport { router as ecoRouter } from './routes/eco.js'\napp.use('/api/eco', ecoRouter)|" server.js

  # Simple UI pages
  cat > src/pages/Market.jsx <<'J'
import { useEffect,useState } from 'react'
export default function Market(){
  const [items,setItems]=useState([]); useEffect(()=>{ fetch('/api/eco/products').then(r=>r.json()).then(setItems)},[])
  const buy = async (slug,price)=>{ const r=await fetch('/api/eco/checkout',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({product:slug,amount:price})}); const j=await r.json(); if(j.checkoutUrl) location.href=j.checkoutUrl; else alert(j.error||'Checkout error') }
  return (<main style={{padding:32}}>
    <h1>Marketplace</h1>
    <ul>{items.map(x=><li key={x.slug} style={{margin:'12px 0'}}><b>{x.title}</b> — ${(x.price/100).toFixed(2)} <button onClick={()=>buy(x.slug,x.price)} style={{marginLeft:8}}>Buy</button></li>)}</ul>
  </main>)
}
J

  cat > src/pages/Partners.jsx <<'J'
import { useEffect,useState } from 'react'
export default function Partners(){
  const [items,setItems]=useState([]); useEffect(()=>{ fetch('/api/eco/partners').then(r=>r.json()).then(setItems)},[])
  return (<main style={{padding:32}}>
    <h1>Partners Directory</h1>
    <ul>{items.map((p,i)=><li key={i}><b>{p.name}</b> — {p.category} {p.city?`• ${p.city}`:''} {p.url?`• ${p.url}`:''}</li>)}</ul>
  </main>)
}
J

  cat > src/pages/AdminEco.jsx <<'J'
export default function AdminEco(){ return (<main style={{padding:32}}>
  <h1>Admin (Ecosystem)</h1>
  <ul>
    <li><a href="#/market">Products</a></li>
    <li><a href="#/partners">Partners</a></li>
    <li><a href="#/analytics">Analytics</a></li>
  </ul>
</main>) }
J

  # Hook into hash router (if using earlier scaffold)
  if [ -f src/App.jsx ]; then
    if ! grep -q "Market" src/App.jsx; then
      sed -i '1i import Market from "./pages/Market.jsx"\nimport Partners from "./pages/Partners.jsx"\nimport AdminEco from "./pages/AdminEco.jsx"' src/App.jsx
      sed -i 's/const route=.*$/const route=()=>location.hash.replace("#\/","");/' src/App.jsx
      sed -i 's/return <Home\/>/if(r==="market") return <Market\/>\n  if(r==="partners") return <Partners\/>\n  if(r==="admin-eco") return <AdminEco\/>\n  return <Home\/>/' src/App.jsx
    fi
  fi
fi

echo "✅ Ecosystem integration added."
echo "Next:"
echo "  • Copy .env.example -> .env and set STRIPE_PUBLIC_KEY / STRIPE_SECRET_KEY (optional for checkout)."
if [ "$IS_NEXT" = "true" ]; then
  echo "  • Run: npm run dev"
  echo "  • Try pages: /market, /partners, /admin"
  echo "  • Try APIs:  /api/eco/products, /api/eco/partners, POST /api/eco/checkout, /api/eco/wioa-export"
else
  echo "  • Run: npm run dev:all"
  echo "  • Try pages: #/market, #/partners, #/admin-eco"
  echo "  • Try APIs:  /api/eco/products, /api/eco/partners, POST /api/eco/checkout, /api/eco/wioa-export.csv"
fi
EOF

chmod +x efh_integrate_ecosystem.sh
echo "Script saved: ./efh_integrate_ecosystem.sh"


---

2) Run it

./efh_integrate_ecosystem.sh

3) Start the app

Next.js: npm run dev → open /market, /partners, /admin

Vite+Express: npm run dev:all → open #/market, #/partners, #/admin-eco


Optional (Stripe Checkout)

Copy .env.example → .env

Set STRIPE_PUBLIC_KEY and STRIPE_SECRET_KEY

Then the Buy buttons will create a live/test Checkout session and redirect.



---

What this adds to your value

Makes your platform feel like a real product suite: LMS plus marketplace, partner directory, and compliance export.

Puts you in the range where orgs can see: training + payments + partners + reporting in one place.

That’s what moves deals from $10k–$25k → $25k–$75k/license (and more with white-label later).


If anything errors in the shell, paste the last ~20 lines and I’ll fix it right away.

