Awesome — here’s a drop-in “My Account” page that works on any of your sister sites. It uses Supabase Auth + Postgres (from the setup we just made), lets users:

sign in via email magic link (OTP),

view/update Profile (name, phone, address),

manage Preferences (email opt-in, locale, accessibility),

see Enrollments (live from shared DB),

sign out.


No build step, no frameworks — just one HTML file. Swap in your Supabase URL and anon key, upload as account.html to your main landing (or any app), and link to it from your header (e.g., “Account”).


---

account.html (paste as a single file)

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>My Account – Elevate for Humanity</title>
<meta name="description" content="Manage your Elevate for Humanity profile, preferences, and enrollments."/>
<style>
  :root { --max: 960px; --pad: 16px; --r: 12px; --ink:#111; --muted:#565; --line:#eee; }
  *{box-sizing:border-box} body{margin:0;font-family:system-ui,Arial,sans-serif;color:var(--ink);background:#fff}
  a{color:inherit}
  .wrap{max-width:var(--max);margin:0 auto;padding:24px var(--pad)}
  header{border-bottom:1px solid var(--line);position:sticky;top:0;background:#fff;z-index:10}
  header .bar{display:flex;gap:12px;align-items:center;justify-content:space-between;padding:10px var(--pad)}
  .brand{font-weight:900}
  .btn{padding:9px 12px;border:1px solid #111;border-radius:12px;background:#fff;cursor:pointer}
  .btn[disabled]{opacity:.6;cursor:not-allowed}
  .card{border:1px solid var(--line);border-radius:12px;padding:16px;background:#fff}
  .grid{display:grid;gap:16px;grid-template-columns:1fr}
  .row{display:grid;gap:8px;grid-template-columns:1fr}
  label{font-size:14px;color:var(--muted)}
  input, select, textarea{width:100%;padding:10px;border:1px solid var(--line);border-radius:10px}
  .muted{color:var(--muted)}
  .hint{font-size:12px;color:#777}
  .section{margin-top:22px}
  ul{margin:0;padding-left:18px}
  .ok{color:#0a7b3e} .err{color:#b00020}
  @media (min-width: 800px){
    .grid-2{grid-template-columns:1fr 1fr}
    .row-2{grid-template-columns:1fr 1fr}
  }
</style>
</head>
<body>

<header>
  <div class="bar wrap">
    <div class="brand"><a href="https://www.elevateforhumanity.org">Elevate for Humanity</a></div>
    <nav style="display:flex;gap:8px;align-items:center">
      <a class="btn" href="https://programs.elevateforhumanity.org">Programs</a>
      <a class="btn" href="https://lms.elevateforhumanity.org">LMS</a>
      <a class="btn" href="https://connect.elevateforhumanity.org">Connect</a>
      <a class="btn" href="https://www.elevateforhumanity.org">Home</a>
    </nav>
  </div>
</header>

<main class="wrap">
  <!-- AUTH PANEL -->
  <section id="authPanel" class="card section">
    <h2>Sign in</h2>
    <p class="muted">Use your email to receive a one-time magic link.</p>
    <div class="row row-2">
      <div>
        <label for="email">Email</label>
        <input id="email" type="email" placeholder="you@example.com" autocomplete="email"/>
      </div>
      <div style="align-self:end">
        <button id="sendLink" class="btn">Send Magic Link</button>
      </div>
    </div>
    <p id="authMsg" class="hint"></p>
  </section>

  <!-- ACCOUNT PANEL -->
  <section id="acctPanel" class="section" style="display:none">
    <div class="grid grid-2">
      <!-- PROFILE -->
      <div class="card">
        <h2>Profile</h2>
        <div class="row row-2">
          <div><label>First name</label><input id="firstName" placeholder="First name"/></div>
          <div><label>Last name</label><input id="lastName" placeholder="Last name"/></div>
        </div>
        <div class="row row-2">
          <div><label>Phone</label><input id="phone" placeholder="(###) ###-####"/></div>
          <div><label>Locale</label>
            <select id="locale">
              <option value="en-US">English (US)</option>
              <option value="en-GB">English (UK)</option>
              <option value="es-ES">Español</option>
            </select>
          </div>
        </div>
        <div class="row">
          <div><label>Address (optional)</label>
            <textarea id="address" rows="3" placeholder='{"street":"...", "city":"...", "state":"IN", "zip":"..."}'></textarea>
          </div>
        </div>
        <div class="row" style="margin-top:8px">
          <button id="saveProfile" class="btn">Save Profile</button>
          <span id="profileMsg" class="hint"></span>
        </div>
      </div>

      <!-- PREFERENCES -->
      <div class="card">
        <h2>Preferences</h2>
        <div class="row">
          <label><input type="checkbox" id="optIn" checked/> Email updates and reminders</label>
          <label>Accessibility JSON (optional)</label>
          <textarea id="accessibility" rows="3" placeholder='{"fontScale":1,"highContrast":false}'></textarea>
        </div>
        <div class="row" style="margin-top:8px">
          <button id="savePrefs" class="btn">Save Preferences</button>
          <span id="prefsMsg" class="hint"></span>
        </div>
      </div>
    </div>

    <!-- ENROLLMENTS -->
    <div class="card section">
      <h2>My Enrollments</h2>
      <p class="muted">These are synced from your shared EFH memory after payment.</p>
      <ul id="enrollList" class="muted"><li>Loading…</li></ul>
    </div>

    <!-- SESSION -->
    <div class="section" style="display:flex;gap:8px;align-items:center">
      <button id="signOut" class="btn">Sign out</button>
      <span id="whoami" class="hint"></span>
    </div>
  </section>
</main>

<!-- Supabase SDK -->
<script type="module">
  import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

  // TODO: replace with your project values
  const SUPABASE_URL = 'https://YOUR-PROJECT.supabase.co';
  const SUPABASE_ANON_KEY = 'YOUR_PUBLIC_ANON_KEY';

  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
    auth: { persistSession: true, storage: localStorage }
  });

  // Elements
  const authPanel = document.getElementById('authPanel');
  const acctPanel = document.getElementById('acctPanel');
  const emailEl   = document.getElementById('email');
  const sendLink  = document.getElementById('sendLink');
  const authMsg   = document.getElementById('authMsg');

  const firstName = document.getElementById('firstName');
  const lastName  = document.getElementById('lastName');
  const phone     = document.getElementById('phone');
  const locale    = document.getElementById('locale');
  const address   = document.getElementById('address');
  const saveProfile = document.getElementById('saveProfile');
  const profileMsg  = document.getElementById('profileMsg');

  const optIn = document.getElementById('optIn');
  const accessibility = document.getElementById('accessibility');
  const savePrefs = document.getElementById('savePrefs');
  const prefsMsg  = document.getElementById('prefsMsg');

  const enrollList = document.getElementById('enrollList');
  const signOutBtn = document.getElementById('signOut');
  const whoami     = document.getElementById('whoami');

  // Helpers
  const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));

  async function requireUser() {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      acctPanel.style.display = 'none';
      authPanel.style.display = 'block';
      return null;
    }
    acctPanel.style.display = 'block';
    authPanel.style.display = 'none';
    whoami.textContent = `Signed in as ${user.email}`;
    return user;
  }

  async function bootstrapAppUser(user) {
    // Upsert into app_users and fetch the surrogate user_id
    await supabase.from('app_users').upsert({
      auth_user_id: user.id,
      email: user.email
    }, { onConflict: 'auth_user_id' });

    const row = await supabase.from('app_users').select('id').eq('auth_user_id', user.id).single();
    return row.data?.id || null;
  }

  async function loadProfile(user_id) {
    const { data: prof } = await supabase.from('profiles').select('*').eq('user_id', user_id).maybeSingle();
    const { data: prefs } = await supabase.from('preferences').select('*').eq('user_id', user_id).maybeSingle();

    // Fill fields
    if (prof) {
      firstName.value = prof.first_name || '';
      lastName.value  = prof.last_name || '';
      phone.value     = prof.phone || '';
      address.value   = prof.address ? JSON.stringify(prof.address) : '';
    }
    if (prefs) {
      optIn.checked = prefs.email_opt_in ?? true;
      locale.value  = prefs.locale || 'en-US';
      accessibility.value = prefs.accessibility ? JSON.stringify(prefs.accessibility) : '';
    }
  }

  async function loadEnrollments() {
    const { data, error } = await supabase
      .from('enrollments')
      .select('program_slug,status,started_at,completed_at')
      .order('created_at', { ascending: false });

    if (error) {
      enrollList.innerHTML = `<li class="err">${error.message}</li>`;
      return;
    }
    if (!data || !data.length) {
      enrollList.innerHTML = `<li class="muted">No enrollments yet.</li>`;
      return;
    }
    enrollList.innerHTML = data.map(e => {
      const started = e.started_at ? new Date(e.started_at).toLocaleDateString() : '—';
      const done = e.completed_at ? new Date(e.completed_at).toLocaleDateString() : '';
      return `<li><strong>${e.program_slug}</strong> — ${e.status}${done ? ' (completed '+done+')' : ''} <span class="hint">started ${started}</span></li>`;
    }).join('');
  }

  // Auth: send magic link
  sendLink?.addEventListener('click', async () => {
    const email = emailEl.value.trim();
    if (!email) { authMsg.textContent = 'Enter your email.'; return; }
    sendLink.disabled = true;
    authMsg.textContent = 'Sending magic link…';
    const { error } = await supabase.auth.signInWithOtp({ email });
    await sleep(300);
    if (error) { authMsg.textContent = error.message; sendLink.disabled = false; return; }
    authMsg.innerHTML = 'Check your email for a sign-in link.';
    sendLink.disabled = false;
  });

  // Save profile
  saveProfile?.addEventListener('click', async () => {
    profileMsg.textContent = 'Saving…';
    try {
      const me = await requireUser(); if (!me) return;
      const { data: appUser } = await supabase.from('app_users').select('id').eq('auth_user_id', me.id).single();
      const user_id = appUser?.id;
      let addr = null;
      if (address.value.trim()) {
        try { addr = JSON.parse(address.value); } catch { profileMsg.textContent = 'Address must be JSON.'; return; }
      }
      const { error } = await supabase.from('profiles').upsert({
        user_id, first_name: firstName.value.trim(), last_name: lastName.value.trim(),
        phone: phone.value.trim(), address: addr, updated_at: new Date().toISOString()
      });
      if (error) profileMsg.textContent = error.message; else profileMsg.innerHTML = '<span class="ok">Saved.</span>';
    } catch (e) { profileMsg.textContent = e.message; }
  });

  // Save preferences
  savePrefs?.addEventListener('click', async () => {
    prefsMsg.textContent = 'Saving…';
    try {
      const me = await requireUser(); if (!me) return;
      const { data: appUser } = await supabase.from('app_users').select('id').eq('auth_user_id', me.id).single();
      const user_id = appUser?.id;
      let a11y = null;
      if (accessibility.value.trim()) {
        try { a11y = JSON.parse(accessibility.value); } catch { prefsMsg.textContent = 'Accessibility must be JSON.'; return; }
      }
      const { error } = await supabase.from('preferences').upsert({
        user_id, email_opt_in: !!optIn.checked, locale: locale.value, accessibility: a11y, updated_at: new Date().toISOString()
      });
      if (error) prefsMsg.textContent = error.message; else prefsMsg.innerHTML = '<span class="ok">Saved.</span>';
    } catch (e) { prefsMsg.textContent = e.message; }
  });

  // Sign out
  signOutBtn?.addEventListener('click', async () => {
    await supabase.auth.signOut();
    acctPanel.style.display = 'none';
    authPanel.style.display = 'block';
    emailEl.focus();
  });

  // Init page
  (async () => {
    const user = await requireUser();
    if (!user) return;
    const user_id = await bootstrapAppUser(user);
    await loadProfile(user_id);
    await loadEnrollments();
  })();
</script>

</body>
</html>


---

Where to put it

On www: /account.html, then add a “Account”/“My Profile” link in your header.

You can also host the same file on programs, lms, or connect if you want a local copy there.


What to edit

Replace SUPABASE_URL and SUPABASE_ANON_KEY with your real values.

Optional: tweak the header links to point to your actual paths.


How it ties into payments

When a student pays, your Stripe webhook → Supabase code (we added earlier) sets enrollments.status = 'active'.

This page reads enrollments live and shows them back to the student — same across all sister sites.


Want me to also give you a compact “Account Drawer” widget you can embed inside any page (slides in from the side, shows the same profile/enrollments)?

