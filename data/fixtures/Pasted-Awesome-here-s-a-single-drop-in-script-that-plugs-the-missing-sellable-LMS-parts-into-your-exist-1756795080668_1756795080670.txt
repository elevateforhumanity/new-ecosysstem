Awesome — here’s a single drop-in script that plugs the missing “sellable LMS” parts into your existing project:

Auth (signup/login) + roles (admin/instructor/student)

Database (Prisma + SQLite for dev; can switch to Postgres later)

Course model (course → module → lesson)

Enrollments, progress, certificates

Stripe webhooks stub to auto-enroll after payment

Reporting endpoints (basic)


It supports Next.js or Vite/React + Express automatically.


---

1) Create the script in your Replit shell

cat > add_lms_features.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

echo "==> Detecting stack…"
IS_NEXT="false"
if [ -f package.json ] && grep -q '"next"' package.json; then IS_NEXT="true"; fi
echo "   Detected: $([ "$IS_NEXT" = "true" ] && echo Next.js || echo Vite/React + Express)"

mkdir -p prisma src lib

# ---------- ENV ----------
touch .env.example
grep -q '^DATABASE_URL=' .env.example || echo 'DATABASE_URL=file:./prisma/dev.db' >> .env.example
grep -q '^JWT_SECRET=' .env.example || echo 'JWT_SECRET=CHANGE_ME_LONG_RANDOM' >> .env.example
grep -q '^STRIPE_SECRET_KEY=' .env.example || echo 'STRIPE_SECRET_KEY=CHANGE_ME' >> .env.example
grep -q '^STRIPE_WEBHOOK_SECRET=' .env.example || echo 'STRIPE_WEBHOOK_SECRET=CHANGE_ME' >> .env.example

# ---------- PRISMA SCHEMA ----------
cat > prisma/schema.prisma <<'P'
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  domain    String? @unique
  users     User[]
  courses   Course[]
  createdAt DateTime @default(now())
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String?
  password  String             // bcrypt hash
  role      Role    @default(STUDENT)
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id])
  enrollments Enrollment[]
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Course {
  id        String  @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String  @unique
  price     Int     @default(0) // cents
  modules   Module[]
  lessons   Lesson[]
  enrollments Enrollment[]
  published Boolean @default(false)
  createdAt DateTime @default(now())
}

model Module {
  id        String  @id @default(cuid())
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])
  title     String
  order     Int     @default(0)
}

model Lesson {
  id        String  @id @default(cuid())
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])
  moduleId  String?
  module    Module? @relation(fields: [moduleId], references: [id])
  title     String
  type      LessonType @default(TEXT)
  content   String?
  duration  Int? // seconds
  order     Int   @default(0)
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
}

model Enrollment {
  id        String  @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])
  progress  Float  @default(0)
  status    EnrollStatus @default(ACTIVE)
  createdAt DateTime @default(now())
}

enum EnrollStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Certificate {
  id        String  @id @default(cuid())
  userId    String
  courseId  String
  url       String
  issuedAt  DateTime @default(now())
}
P

# ---------- COMMON LIBS ----------
mkdir -p lib
cat > lib/hash.js <<'J'
import bcrypt from 'bcryptjs'
export const hash = async (s) => bcrypt.hash(s, 10)
export const compare = async (s, h) => bcrypt.compare(s, h)
J

cat > lib/jwt.js <<'J'
import jwt from 'jsonwebtoken'
const SECRET = process.env.JWT_SECRET || 'dev'
export const signToken = (payload, opts={expiresIn:'7d'}) => jwt.sign(payload, SECRET, opts)
export const verifyToken = (token) => { try { return jwt.verify(token, SECRET) } catch { return null } }
J

# ---------- INSTALL DEPENDENCIES ----------
echo "==> Installing dependencies (Prisma, auth, crypto)…"
npm i -S @prisma/client bcryptjs jsonwebtoken pdfkit || true
npm i -D prisma || true

# ---------- INIT PRISMA CLIENT ----------
npx prisma generate >/dev/null

# ---------- PER-STACK FILES ----------
if [ "$IS_NEXT" = "true" ]; then
  mkdir -p pages/api/auth pages/api/courses pages/api/enrollments pages/api/stripe pages/api/reports

  # Prisma client helper
  cat > lib/prisma.js <<'J'
import { PrismaClient } from '@prisma/client'
const globalForPrisma = globalThis
export const prisma = globalForPrisma.prisma || new PrismaClient()
if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
J

  # AUTH: signup
  cat > pages/api/auth/signup.js <<'J'
import { prisma } from '../../../lib/prisma'
import { hash, compare } from '../../../lib/hash'
export default async function handler(req,res){
  if(req.method!=='POST') return res.status(405).end()
  const {email,password,name,role='STUDENT',orgSlug} = req.body||{}
  if(!email||!password) return res.status(400).json({error:'email/password required'})
  const exists = await prisma.user.findUnique({where:{email}})
  if(exists) return res.status(400).json({error:'email exists'})
  let org=null
  if(orgSlug){ org = await prisma.organization.findUnique({where:{slug:orgSlug}}) }
  const user = await prisma.user.create({
    data:{ email, name, role, password: await hash(password), orgId: org?.id }
  })
  return res.json({id:user.id,email:user.email,role:user.role})
}
J

  # AUTH: login
  cat > pages/api/auth/login.js <<'J'
import { prisma } from '../../../lib/prisma'
import { compare } from '../../../lib/hash'
import { signToken } from '../../../lib/jwt'
export default async function handler(req,res){
  if(req.method!=='POST') return res.status(405).end()
  const {email,password}=req.body||{}
  const user = await prisma.user.findUnique({where:{email}})
  if(!user) return res.status(401).json({error:'invalid'})
  const ok = await compare(password,user.password)
  if(!ok) return res.status(401).json({error:'invalid'})
  const token = signToken({uid:user.id,role:user.role,orgId:user.orgId})
  return res.json({token, role:user.role})
}
J

  # COURSES CRUD (minimal)
  cat > pages/api/courses/index.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(req,res){
  if(req.method==='GET'){
    const courses = await prisma.course.findMany({ where:{published:true}, select:{id:true,slug:true,title:true,price:true}})
    return res.json(courses)
  }
  if(req.method==='POST'){
    const {title,slug,price=0,orgSlug} = req.body||{}
    let org = null
    if(orgSlug){ org = await prisma.organization.findUnique({where:{slug:orgSlug}}) }
    const c = await prisma.course.create({data:{title,slug,price,orgId:org?.id}})
    return res.json(c)
  }
  res.status(405).end()
}
J

  # ENROLLMENTS
  cat > pages/api/enrollments/index.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(req,res){
  if(req.method==='GET'){
    const {userId} = req.query
    const e = await prisma.enrollment.findMany({ where:{userId}, include:{course:true}})
    return res.json(e)
  }
  if(req.method==='POST'){
    const {userId,courseId} = req.body||{}
    const e = await prisma.enrollment.create({data:{userId,courseId}})
    return res.json(e)
  }
  res.status(405).end()
}
J

  # CERTIFICATES (PDF demo already from your scaffold, keep or replace)
  mkdir -p pages/api/certificates
  cat > pages/api/certificates/[course].js <<'J'
import PDFDocument from 'pdfkit'
export default function handler(req,res){
  const {course}=req.query
  res.setHeader('Content-Type','application/pdf')
  res.setHeader('Content-Disposition',`inline; filename="${course}-certificate.pdf"`)
  const doc=new PDFDocument({size:'LETTER',margin:50})
  doc.pipe(res)
  doc.fontSize(24).text('Certificate of Completion',{align:'center'})
  doc.moveDown().fontSize(18).text(`Awarded to: Demo Student`,{align:'center'})
  doc.moveDown().fontSize(16).text(`For completing: ${course}`,{align:'center'})
  doc.moveDown().fontSize(12).text(`Date: ${new Date().toLocaleDateString()}`,{align:'center'})
  doc.end()
}
J

  # STRIPE WEBHOOK (stub)
  cat > pages/api/stripe/webhook.js <<'J'
export const config = { api: { bodyParser: false } } // stripe needs raw body
export default async function handler(req,res){
  // In production: verify signature with STRIPE_WEBHOOK_SECRET,
  // decode the event, on checkout.session.completed -> create enrollment
  return res.status(200).json({ok:true})
}
J

  # REPORTS (basic)
  cat > pages/api/reports/summary.js <<'J'
import { prisma } from '../../../lib/prisma'
export default async function handler(_req,res){
  const enrollments = await prisma.enrollment.count()
  const completed = await prisma.enrollment.count({ where:{status:'COMPLETED'}})
  const courses = await prisma.course.count({ where:{published:true}})
  res.json({enrollments,completed,courses})
}
J

else
  # ---- VITE/REACT + EXPRESS ----
  # Ensure server.js exists
  if [ ! -f server.js ]; then
cat > server.js <<'J'
import express from 'express'
import cors from 'cors'
import path from 'path'
import { fileURLToPath } from 'url'
import dotenv from 'dotenv'
dotenv.config()
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const app = express()
app.use(cors())
app.use(express.json())
const PORT=process.env.PORT||3000
app.listen(PORT,()=>console.log('API listening on',PORT))
J
  fi

  # Prisma client helper for Node
  cat > lib/prisma.js <<'J'
import { PrismaClient } from '@prisma/client'
export const prisma = new PrismaClient()
J

  # Mount API routes
  awk '1;/app.use\(express\.json\)\(\);/ && !x{print "import { router as apiRouter } from \x27./routes/api.js\x27"; x=1}' server.js > server.tmp && mv server.tmp server.js || true
  grep -q "app.use('/api'" server.js || sed -i "s|app.use(express.json())|app.use(express.json())\n\n// API routes\napp.use('/api', apiRouter)|" server.js

  mkdir -p routes
  cat > routes/api.js <<'J'
import { Router } from 'express'
import PDFDocument from 'pdfkit'
import { prisma } from '../lib/prisma.js'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'
const router = Router()
const SECRET = process.env.JWT_SECRET || 'dev'

const signToken = (p)=>jwt.sign(p,SECRET,{expiresIn:'7d'})

// AUTH
router.post('/auth/signup', async (req,res)=>{
  const {email,password,name,role='STUDENT',orgSlug} = req.body||{}
  if(!email||!password) return res.status(400).json({error:'email/password required'})
  const exists = await prisma.user.findUnique({where:{email}})
  if(exists) return res.status(400).json({error:'email exists'})
  let org=null
  if(orgSlug){ org = await prisma.organization.findUnique({where:{slug:orgSlug}}) }
  const user = await prisma.user.create({data:{email,name,role,password:await bcrypt.hash(password,10),orgId:org?.id}})
  res.json({id:user.id,email:user.email,role:user.role})
})

router.post('/auth/login', async (req,res)=>{
  const {email,password}=req.body||{}
  const u = await prisma.user.findUnique({where:{email}})
  if(!u) return res.status(401).json({error:'invalid'})
  const ok = await bcrypt.compare(password,u.password)
  if(!ok) return res.status(401).json({error:'invalid'})
  const token = signToken({uid:u.id,role:u.role,orgId:u.orgId})
  res.json({token,role:u.role})
})

// COURSES
router.get('/courses', async (_req,res)=>{
  const cs = await prisma.course.findMany({ where:{published:true}, select:{id:true,slug:true,title:true,price:true}})
  res.json(cs)
})
router.post('/courses', async (req,res)=>{
  const {title,slug,price=0,orgSlug} = req.body||{}
  let org=null; if(orgSlug){ org = await prisma.organization.findUnique({where:{slug:orgSlug}}) }
  const c = await prisma.course.create({data:{title,slug,price,orgId:org?.id}})
  res.json(c)
})

// ENROLLMENTS
router.get('/enrollments', async (req,res)=>{
  const {userId}=req.query
  const e = await prisma.enrollment.findMany({ where:{userId}, include:{course:true}})
  res.json(e)
})
router.post('/enrollments', async (req,res)=>{
  const {userId,courseId}=req.body||{}
  const e = await prisma.enrollment.create({data:{userId,courseId}})
  res.json(e)
})

// CERTIFICATES (PDF)
router.get('/certificates/:course.pdf', (req,res)=>{
  const {course}=req.params
  res.setHeader('Content-Type','application/pdf')
  res.setHeader('Content-Disposition',`inline; filename="${course}-certificate.pdf"`)
  const doc=new PDFDocument({size:'LETTER',margin:50})
  doc.pipe(res)
  doc.fontSize(24).text('Certificate of Completion',{align:'center'})
  doc.moveDown().fontSize(18).text(`Awarded to: Demo Student`,{align:'center'})
  doc.moveDown().fontSize(16).text(`For completing: ${course}`,{align:'center'})
  doc.moveDown().fontSize(12).text(`Date: ${new Date().toLocaleDateString()}`,{align:'center'})
  doc.end()
})

// REPORTS
router.get('/reports/summary', async (_req,res)=>{
  const enrollments = await prisma.enrollment.count()
  const completed = await prisma.enrollment.count({ where:{status:'COMPLETED'}})
  const courses = await prisma.course.count({ where:{published:true}})
  res.json({enrollments,completed,courses})
})

export { router }
J

  # Ensure scripts for dev
  node - <<'JS'
const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));
pkg.type = pkg.type || "module";
pkg.scripts = pkg.scripts || {};
pkg.scripts.dev = pkg.scripts.dev || "vite";
pkg.scripts['dev:api'] = pkg.scripts['dev:api'] || "node server.js";
pkg.scripts['dev:all'] = "concurrently -k -n WEB,API \"npm:dev\" \"npm:dev:api\"";
pkg.scripts.build = pkg.scripts.build || "vite build";
pkg.scripts.preview = pkg.scripts.preview || "vite preview --port 4173";
fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));
JS

fi

# ---------- GITIGNORE ----------
if [ ! -f .gitignore ]; then
  cat > .gitignore <<'G'
node_modules/
.env
.env.*
.prisma/
*.log
dist/
.next/
build/
out/
G
fi

echo "==> Creating SQLite dev DB & applying schema…"
npx prisma migrate dev --name init --create-only >/dev/null 2>&1 || true
npx prisma db push

echo "✅ Done. Added: Auth, Roles, DB, Courses, Enrollments, Certificates API, Reports."
echo "Next steps:"
echo "  1) Copy .env.example to .env and set JWT_SECRET/Stripe keys"
if [ "$IS_NEXT" = "true" ]; then
  echo "  2) Run: npm run dev     (Next.js)"
  echo "  3) Try endpoints: /api/auth/signup, /api/auth/login, /api/courses, /api/enrollments, /api/reports/summary"
else
  echo "  2) Run: npm run dev:all (Vite UI + Express API)"
  echo "  3) Try endpoints: /api/auth/signup, /api/auth/login, /api/courses, /api/enrollments, /api/reports/summary"
fi
EOF

chmod +x add_lms_features.sh
echo "Script saved: ./add_lms_features.sh"

2) Run it

./add_lms_features.sh


---

What you get (today)

Auth & Roles: /api/auth/signup, /api/auth/login (JWT-based)

DB (Prisma + SQLite): ready to swap to Postgres later (just change DATABASE_URL)

Courses & Enrollments: /api/courses, /api/enrollments

Certificates API: PDF at /api/certificates/<course>.pdf

Reports: /api/reports/summary for quick metrics

Stripe Webhook stub: /api/stripe/webhook placeholder to auto-enroll on payment


How to run

Next.js: npm run dev

Vite + Express: npm run dev:all

Copy .env.example → .env and fill JWT_SECRET (random string), Stripe keys later.


How this raises your value

This turns your clone into a sellable LMS: multi-user roles, persistent data, reporting, and payment flow hooks — the exact feature set buyers expect for pilots and early licenses.


---

If you want, I can also add a seed script that inserts a demo org, an instructor, a student, and a demo course so the dashboards have real data on first run.

