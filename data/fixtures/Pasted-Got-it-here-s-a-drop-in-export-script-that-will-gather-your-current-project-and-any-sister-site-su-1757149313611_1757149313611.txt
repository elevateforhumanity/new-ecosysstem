Got it—here’s a drop-in export script that will gather your current project and any “sister site” subfolders into clean ZIPs (ignoring .git, node_modules, build folders, etc.). It auto-detects sites, but you can also force a list.

How to use

1. In your Replit Shell, paste the script below into a new file:



nano export_sites.sh

Paste → save (Ctrl+O, Enter) → exit (Ctrl+X), then run:

chmod +x export_sites.sh
./export_sites.sh

After it finishes, open the Files panel → exports/ → download the ZIPs.


---

export_sites.sh

#!/usr/bin/env bash
set -euo pipefail

# ========= Settings =========
OUTDIR="exports"
TS="$(date +%Y%m%d-%H%M%S)"

# Optional: set SITES env var to force which subfolders count as "sister sites".
# Example: SITES="apps/site-a apps/site-b" ./export_sites.sh
SITES_DEFAULT=""

# Exclude junk/large/build artifacts from zips
read -r -d '' EXCLUDE <<'EOF'
-x ".git/*" \
-x "*/.git/*" \
-x "node_modules/*" \
-x "*/node_modules/*" \
-x "dist/*" \
-x "*/dist/*" \
-x "build/*" \
-x "*/build/*" \
-x ".next/*" \
-x "*/.next/*" \
-x ".cache/*" \
-x "*/.cache/*" \
-x "out/*" \
-x "*/out/*" \
-x ".vercel/*" \
-x "*/.vercel/*" \
-x ".DS_Store" \
-x "coverage/*" \
-x "*/coverage/*" \
-x "*.log" \
-x "*.tmp" \
-x "tmp/*" \
-x "*/tmp/*" \
-x ".vscode/*" \
-x "*/.vscode/*" \
-x ".idea/*" \
-x "*/.idea/*" \
-x ".env" \
-x ".env.*" \
-x "*/.env" \
-x "*/.env.*"
EOF

# ========= Helpers =========
die() { echo "❌ $*" >&2; exit 1; }
have() { command -v "$1" >/dev/null 2>&1; }

zip_it() {
  local label="$1"; shift
  local target="$OUTDIR/${label}-${TS}.zip"

  echo "→ Creating: $target"
  # shellcheck disable=SC2086
  zip -r -9 "$target" "$@" $EXCLUDE >/dev/null
  du -h "$target" | awk '{print "   size:", $1}'
}

# ========= Checks =========
have zip || die "zip is not installed in this environment."

mkdir -p "$OUTDIR"

# ========= 1) Full project ZIP (root) =========
# Zips everything in the current project (minus excludes)
zip_it "full-project" .

# ========= 2) Sister sites auto-detect =========
# If SITES is provided, use it; otherwise try to find likely site roots:
# - folders (max depth 2) that contain package.json, vite config, next config, or a top-level index.html
SITES="${SITES:-$SITES_DEFAULT}"
if [[ -z "${SITES// }" ]]; then
  mapfile -t detected < <(
    find . -maxdepth 2 -type f \( \
      -name package.json -o \
      -name "vite.config.*" -o \
      -name "next.config.*" -o \
      -name "astro.config.*" -o \
      -name "remix.config.*" -o \
      -name "index.html" \
    \) -printf '%h\n' \
    | sed 's#^\./##' \
    | grep -vE '^(|\.git|node_modules|dist|build|out|.next|.cache|exports)$' \
    | sort -u
  )
else
  # Use user-provided list
  IFS=' ' read -r -a detected <<<"$SITES"
fi

# Filter to directories that actually exist and aren’t "."
valid_sites=()
for d in "${detected[@]:-}"; do
  [[ "$d" == "." ]] && continue
  [[ -d "$d" ]] && valid_sites+=("$d")
done

if ((${#valid_sites[@]})); then
  echo "Found sister sites: ${valid_sites[*]}"
  # Make one ZIP per site folder
  for d in "${valid_sites[@]}"; do
    # sanitize label (replace / with -)
    label="$(echo "$d" | tr '/' '-')"
    zip_it "site-${label}" "$d"
  done

  # Also create a combo ZIP of all detected sites (handy for one download)
  echo "→ Creating combined sister-sites zip"
  # shellcheck disable=SC2068
  zip_it "sister-sites-combined" ${valid_sites[@]}
else
  echo "No sister sites detected automatically."
  echo "Tip: run like this to force a list:"
  echo "SITES=\"apps/site-a apps/site-b\" ./export_sites.sh"
fi

echo "✅ Done. ZIP files are in: $OUTDIR/"


---

Notes

Automatic detection: looks for folders (depth ≤ 2) with package.json, vite.config.*, next.config.*, index.html, etc.

Force your own list:

SITES="apps/landing packages/admin web/storefront" ./export_sites.sh

Creates:

exports/full-project-<timestamp>.zip

exports/site-<each-sister-site>-<timestamp>.zip

exports/sister-sites-combined-<timestamp>.zip



If anything throws an error, tell me what you see in the shell and I’ll tweak the script for your layout.

