efh-universal.v2.3.js (security-hardened)

Paste this file at your brain assets host, e.g. https://assets.elevateforhumanity.org/scripts/efh-universal.v2.3.js

/* EFH Universal v2.3 (security-hardened)
   - Safe DOM injection (no raw innerHTML; strips <script>, on* attrs, javascript: URLs)
   - Validates JSON shapes before rendering
   - No-op if configs missing (prevents crashes)
*/
(() => {
  const $ = (sel, root=document) => root.querySelector(sel);

  // Read config from <script> data-*
  const THIS = document.currentScript || [...document.scripts].slice(-1)[0];
  const ASSETS = THIS?.dataset?.assets || '';
  const PAY_API = THIS?.dataset?.payapi || '';
  const PROGRAMS_PATH = THIS?.dataset?.programs || '/config/health-programs.json';
  const PARTNERS_PATH = THIS?.dataset?.partners || ''; // optional
  const DEFAULT_TAB = THIS?.dataset?.activeTab || 'state-funded';

  const ABS = (p) => /^https?:\/\//i.test(p) ? p : (ASSETS.replace(/\/$/,'') + '/' + p.replace(/^\//,''));

  // ---------- tiny sanitizer ----------
  function sanitizeHTMLString(html) {
    // Remove scripts & iframes entirely; drop inline handlers; block "javascript:" URLs
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');

    // remove potentially dangerous nodes
    doc.querySelectorAll('script,noscript,iframe,object,embed,style,link').forEach(n => n.remove());

    // remove on* attributes and "javascript:" URLs
    doc.querySelectorAll('*').forEach(el => {
      [...el.attributes].forEach(a => {
        const name = a.name.toLowerCase();
        if (name.startsWith('on')) el.removeAttribute(a.name); // onclick, onload, etc.
        if ((name === 'href' || name === 'src') && /^javascript:/i.test(a.value || '')) {
          el.removeAttribute(a.name);
        }
      });
    });

    // Return a DocumentFragment we can safely append
    const frag = document.createDocumentFragment();
    [...doc.body.childNodes].forEach(n => frag.appendChild(n));
    return frag;
  }

  // Safe append (no innerHTML)
  function safeAppend(target, html) {
    try {
      const frag = sanitizeHTMLString(html);
      target.textContent = ''; // clear container
      target.appendChild(frag);
    } catch { /* ignore */ }
  }

  // ---------- fetch helpers ----------
  async function fetchText(url) {
    const r = await fetch(url, { cache: 'no-store', credentials: 'omit', redirect: 'follow' });
    return r.ok ? r.text() : '';
  }
  async function fetchJSON(url) {
    const r = await fetch(url, { cache: 'no-store', credentials: 'omit', redirect: 'follow' });
    if (!r.ok) throw new Error('Not found: ' + url);
    return r.json();
  }

  // ---------- chrome injection ----------
  async function injectChrome() {
    const hdrHost = $('#efh-header');
    const ftrHost = $('#efh-footer');
    if (!hdrHost && !ftrHost) return;

    const [hdr, ftr] = await Promise.all([
      fetchText(ABS('ui/header.html')),
      fetchText(ABS('ui/footer.html')),
    ]);

    if (hdr && hdrHost) safeAppend(hdrHost, hdr);
    if (ftr && ftrHost) safeAppend(ftrHost, ftr);
  }

  // ---------- data loading + validation ----------
  function asPrograms(x) {
    if (!Array.isArray(x)) return [];
    return x
      .filter(p => p && typeof p === 'object')
      .map(p => ({
        slug: String(p.slug || '').trim(),
        name: String(p.name || '').trim(),
        track: (p.track || '').toString(),
        funding: Array.isArray(p.funding) ? p.funding.map(String) : [],
        google_form_url: String(p.google_form_url || ''),
        stripe_price_id: String(p.stripe_price_id || ''),
        partner_connect_acc: String(p.partner_connect_acc || ''),
      }))
      .filter(p => p.slug && p.name);
  }
  function asPartners(x) {
    if (!Array.isArray(x)) return [];
    return x
      .filter(p => p && typeof p === 'object')
      .map(p => ({
        name: String(p.name || '').trim(),
        type: String(p.type || ''),
        role: String(p.role || ''),
        contact: String(p.contact || ''),
        website: String(p.website || ''),
        connect_acc: String(p.connect_acc || ''),
        logo: String(p.logo || p.icon || ''),
      }))
      .filter(p => p.name);
  }

  async function loadData() {
    const programsUrl = /^https?:\/\//i.test(PROGRAMS_PATH) ? PROGRAMS_PATH : ABS(PROGRAMS_PATH.replace(/^\//,''));
    const partnersUrl = PARTNERS_PATH
      ? (/^https?:\/\//i.test(PARTNERS_PATH) ? PARTNERS_PATH : ABS(PARTNERS_PATH.replace(/^\//,'')))
      : '';

    const [pRes, prRes] = await Promise.allSettled([
      fetchJSON(programsUrl),
      partnersUrl ? fetchJSON(partnersUrl) : Promise.resolve([])
    ]);

    return {
      programs: pRes.status === 'fulfilled' ? asPrograms(pRes.value) : [],
      partners: prRes.status === 'fulfilled' ? asPartners(prRes.value) : []
    };
  }

  // ---------- header: ensure Partners link when data exists ----------
  function ensurePartnersLink(hasPartners, partners) {
    if (!hasPartners) return;
    const existing = document.querySelector('a[href="/partners"], a[href$="/partners"]');
    if (existing) return;

    const headerRoot = $('#efh-header');
    if (!headerRoot) return;
    let nav = headerRoot.querySelector('.efh-header') || headerRoot.querySelector('nav');
    if (!nav) {
      nav = document.createElement('nav');
      nav.className = 'efh-header';
      headerRoot.appendChild(nav);
    }

    const a = document.createElement('a');
    a.href = '/partners';
    a.rel = 'noopener';
    a.textContent = 'Partners';

    // Tiny icon if any partner has a logo
    const first = partners.find(p => p.logo && /^https?:\/\//i.test(p.logo));
    if (first) {
      const img = document.createElement('img');
      img.src = first.logo;
      img.alt = 'Partners';
      img.width = 16; img.height = 16;
      img.loading = 'lazy'; img.decoding = 'async';
      const wrap = document.createElement('span');
      wrap.style.display = 'inline-flex'; wrap.style.alignItems = 'center'; wrap.style.gap = '6px';
      wrap.appendChild(img);
      const t = document.createElement('span'); t.textContent = 'Partners';
      wrap.appendChild(t);
      a.textContent = ''; a.appendChild(wrap);
    }
    nav.appendChild(a);
  }

  // ---------- checkout ----------
  async function enrollStripe(program, fundingMemory = {}) {
    if (!PAY_API) return alert('Checkout unavailable.');
    const body = program.stripe_price_id
      ? {
          priceId: program.stripe_price_id,
          quantity: 1,
          metadata: { program_slug: program.slug, program: program.name, ...fundingMemory },
          partner_connect_acc: program.partner_connect_acc || ''
        }
      : {
          productName: program.name,
          unitAmount: 0, // backend decides price or free (state-funded)
          currency: 'usd',
          quantity: 1,
          metadata: { program_slug: program.slug, program: program.name, ...fundingMemory },
          partner_connect_acc: program.partner_connect_acc || ''
        };

    let res;
    try {
      res = await fetch(PAY_API, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(body)
      });
    } catch { return alert('Network error.'); }

    let data = {};
    try { data = await res.json(); } catch {}
    if (data?.url) location.href = data.url;
    else alert(data?.error || 'Checkout failed');
  }

  // ---------- UI ----------
  function renderApp({ programs, partners }) {
    const host = $('#efh-programs');
    const hasPartners = partners.length > 0;

    ensurePartnersLink(hasPartners, partners);
    if (!host) return; // page doesn't have program grid

    // Base shell + styles
    host.innerHTML = '';
    const shell = document.createElement('section');
    shell.className = 'efh-wrap';
    shell.innerHTML = `
      <header class="efh-row">
        <h2 class="efh-title">Programs</h2>
        <nav class="efh-tabs">
          <button data-tab="state-funded" type="button">State-Funded</button>
          <button data-tab="open-enrollment" type="button">Open Enrollment</button>
          ${hasPartners ? `<button data-tab="partners" type="button">Partners</button>` : ``}
        </nav>
      </header>
      <p class="efh-muted efh-hint">State-funded programs support WIOA, WRG, WEX, JRI, OJT. Use the Portal for secure documents.</p>
      <div id="efh-cards" class="efh-cards" aria-live="polite"></div>
      <style>
        .efh-wrap{max-width:1180px;margin:0 auto;padding:24px 16px;font-family:system-ui,Arial}
        .efh-row{display:flex;gap:10px;align-items:center;justify-content:space-between;flex-wrap:wrap}
        .efh-title{margin:.2em 0}
        .efh-tabs{display:flex;gap:6px}
        .efh-tabs button{padding:9px 12px;border:1px solid #111;border-radius:12px;background:#fff;cursor:pointer}
        .efh-tabs button[aria-selected="true"]{background:#f5f5f5}
        .efh-muted{color:#666}
        .efh-cards{display:grid;gap:14px;grid-template-columns:repeat(auto-fit,minmax(280px,1fr))}
        .efh-card{border:1px solid #ececec;border-radius:14px;background:#fff;padding:16px}
        .efh-pill{display:inline-block;padding:3px 8px;border:1px solid #ddd;border-radius:999px;font-size:12px;margin-right:6px}
        .efh-btn{padding:9px 12px;border:1px solid #111;border-radius:12px;background:#fff;cursor:pointer}
        .efh-tag{display:inline-block;font-size:12px;padding:2px 6px;border:1px solid #ddd;border-radius:6px;margin-right:6px}
        .efh-kv{font-size:13px;color:#555}.efh-kv b{color:#222}
        .efh-logo{width:48px;height:48px;object-fit:contain;border-radius:8px;background:#fff;border:1px solid #eee}
        .efh-logo-row{display:flex;align-items:center;gap:10px;margin-bottom:8px}
      </style>
    `;
    host.appendChild(shell);

    const tabs = shell.querySelectorAll('.efh-tabs button');
    const cards = shell.querySelector('#efh-cards');

    const Funding = { get(){ try { return JSON.parse(localStorage.getItem('EFH_FUNDING') || '{}'); } catch { return {}; } } };

    let tab = DEFAULT_TAB;
    if (['#state-funded','#open-enrollment','#partners'].includes(location.hash)) {
      tab = location.hash.slice(1);
    }

    function drawPrograms(which) {
      const list = programs.filter(p => which === 'state-funded' ? p.track === 'state-funded' : p.track !== 'state-funded');
      cards.innerHTML = list.map(p => `
        <article class="efh-card" id="${p.slug}">
          <h3 style="margin:0">${p.name}</h3>
          ${p.funding?.length ? `<div style="margin:6px 0">${p.funding.map(x=>`<span class="efh-pill">${x}</span>`).join('')}</div>` : ''}
          <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:8px">
            ${p.google_form_url
              ? `<a class="efh-btn" target="_blank" rel="noopener" href="${p.google_form_url}">Enroll (Funding Form)</a>`
              : `<button class="efh-btn" data-enroll="${p.slug}" type="button">Enroll</button>`
            }
            <a class="efh-btn" href="/portal" rel="noopener">Portal</a>
          </div>
        </article>
      `).join('');

      // Wire enroll buttons
      cards.querySelectorAll('[data-enroll]').forEach(btn => {
        btn.addEventListener('click', () => {
          const slug = btn.getAttribute('data-enroll');
          const program = programs.find(p => p.slug === slug);
          if (program) enrollStripe(program, Funding.get());
        }, { passive: true });
      });
    }

    function drawPartners() {
      if (!hasPartners) { cards.innerHTML = `<p class="efh-muted">No partners listed yet.</p>`; return; }
      cards.innerHTML = partners.map(pr => {
        const logo = (pr.logo && /^https?:\/\//i.test(pr.logo))
          ? `<img class="efh-logo" src="${pr.logo}" alt="${(pr.name||'Partner')} logo" loading="lazy" decoding="async" />` : '';
        return `
          <article class="efh-card">
            ${logo ? `<div class="efh-logo-row">${logo}<div><h3 style="margin:0">${pr.name}</h3></div></div>`
                   : `<h3 style="margin:0">${pr.name}</h3>`}
            <p style="margin:6px 0 10px 0">
              ${pr.type ? `<span class="efh-tag">${pr.type}</span>` : ''}
              ${pr.role ? `<span class="efh-tag">${pr.role}</span>` : ''}
            </p>
            <div class="efh-kv">
              ${pr.contact ? `<div><b>Contact:</b> ${pr.contact}</div>` : ''}
              ${pr.website ? `<div><b>Website:</b> <a target="_blank" rel="noopener" href="${pr.website}">${pr.website}</a></div>` : ''}
              ${pr.connect_acc ? `<div><b>Stripe Connect:</b> ${pr.connect_acc}</div>` : ''}
            </div>
          </article>
        `;
      }).join('');
    }

    function draw() {
      tabs.forEach(b => b.setAttribute('aria-selected', b.dataset.tab === tab ? 'true' : 'false'));
      if (tab === 'partners') drawPartners();
      else drawPrograms(tab);
    }

    tabs.forEach(b => b.addEventListener('click', () => { tab = b.dataset.tab; draw(); }, { passive: true }));
    draw();
  }

  // ---------- boot ----------
  (async () => {
    try { await injectChrome(); } catch {}
    try { renderApp(await loadData()); }
    catch {
      const host = $('#efh-programs');
      if (host) host.innerHTML = `<p class="efh-muted" style="padding:16px">Programs unavailable right now.</p>`;
    }
  })();
})();


---

How to roll it out (and pass scanners)

1. Delete old versions from your assets host:
efh-universal.v1.js, efh-universal.v2.1.js, efh-universal.v2.2.js


2. Use one file everywhere:



<script src="https://assets.elevateforhumanity.org/scripts/efh-universal.v2.3.js"
        data-assets="https://assets.elevateforhumanity.org"
        data-payapi="https://pay.elevateforhumanity.org/api/checkout"
        data-programs="/config/health-programs.json"
        data-partners="/config/partners.json"
        data-active-tab="state-funded"
        defer></script>

3. Security headers (add at each site)
These satisfy most DOL/DWD/DOE scans:



Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type-Options: nosniff
Referrer-Policy: no-referrer-when-downgrade
Content-Security-Policy:
  default-src 'self';
  script-src 'self' https://assets.elevateforhumanity.org https://pay.elevateforhumanity.org;
  connect-src 'self' https://assets.elevateforhumanity.org https://pay.elevateforhumanity.org;
  img-src 'self' data: https://assets.elevateforhumanity.org;
  style-src 'self' 'unsafe-inline' https://assets.elevateforhumanity.org;
  frame-ancestors 'none';

4. Run the audits (from the pack I gave you):



npm run audit:links
npm run audit:images

Fix anything reported (404/500, duplicate routes, placeholder images, missing width/height).

5. Lighthouse (Chrome DevTools → Lighthouse)
Verify no “Best Practices / Security” red flags.


