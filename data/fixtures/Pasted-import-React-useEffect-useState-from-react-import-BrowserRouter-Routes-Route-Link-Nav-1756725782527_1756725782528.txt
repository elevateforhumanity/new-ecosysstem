import React, { useEffect, useState } from "react";
import { BrowserRouter, Routes, Route, Link, Navigate } from "react-router-dom";

/*
  EFH Router App (React + Tailwind)
  -------------------------------------------------
  - Drop this into client/src/App.tsx
  - Run: npm i react-router-dom
  - Ensure main.tsx renders <App />
  - Server must SPA-fallback to index.html (your server.mjs already does)

  Humanized: Clean navigation, clear page sections, easy to read.
*/

// Badge that confirms Tailwind loaded and reports to the server
function TailwindCheck() {
  const [ok, setOk] = useState(true);

  useEffect(() => {
    const test = document.createElement("div");
    test.className = "hidden"; // Tailwind sets display:none
    document.body.appendChild(test);
    const computed = window.getComputedStyle(test).display;
    document.body.removeChild(test);

    const tailwindOk = computed === "none";
    setOk(tailwindOk);

    fetch("/_telemetry", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ tailwindOk }),
    }).catch(() => {});
  }, []);

  return ok ? (
    <div className="fixed bottom-3 right-3 z-50 text-xs bg-green-600 text-white px-2 py-1 rounded-md shadow-md">
      Tailwind OK
    </div>
  ) : (
    <div className="fixed bottom-3 right-3 z-50 text-xs bg-red-600 text-white px-2 py-1 rounded-md shadow-md">
      Tailwind NOT loaded
    </div>
  );
}

function Navbar() {
  return (
    <header className="sticky top-0 z-40 bg-white/90 backdrop-blur border-b border-slate-200">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <Link to="/" className="flex items-center gap-2">
            <span className="inline-flex h-9 w-9 items-center justify-center rounded-xl bg-indigo-600 text-white font-bold">EFH</span>
            <span className="font-semibold tracking-tight">Elevate for Humanity</span>
          </Link>
          <nav className="hidden md:flex items-center gap-6 text-sm">
            <Link to="/hub" className="hover:text-indigo-600">Hub</Link>
            <Link to="/programs" className="hover:text-indigo-600">Programs</Link>
            <Link to="/lms" className="hover:text-indigo-600">LMS</Link>
            <Link to="/connect" className="hover:text-indigo-600">Connect</Link>
            <Link to="/pay" className="hover:text-indigo-600">Pay</Link>
            <Link to="/compliance" className="hover:text-indigo-600">Compliance</Link>
            <Link to="/debug" className="text-slate-500 hover:text-indigo-600">Debug</Link>
          </nav>
          <div className="hidden md:flex items-center gap-3">
            <Link to="/apply" className="inline-flex items-center rounded-xl border border-slate-300 px-3 py-2 text-sm font-medium hover:bg-slate-50">Apply</Link>
            <Link to="/partners" className="inline-flex items-center rounded-xl bg-indigo-600 text-white px-3 py-2 text-sm font-medium hover:bg-indigo-700">Partner</Link>
          </div>
        </div>
      </div>
    </header>
  );
}

function Shell({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen bg-white text-slate-900 flex flex-col">
      <div className="w-full bg-indigo-50 text-indigo-700 text-sm py-2 px-4 text-center">
        Elevate for Humanity · Workforce Development & Training Institute
      </div>
      <Navbar />
      <main className="flex-grow">{children}</main>
      <footer className="border-t border-slate-200 py-10 mt-10">
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 grid md:grid-cols-3 gap-8 text-sm">
          <div>
            <div className="flex items-center gap-2">
              <span className="inline-flex h-8 w-8 items-center justify-center rounded-lg bg-indigo-600 text-white font-bold">EFH</span>
              <span className="font-semibold">Elevate for Humanity</span>
            </div>
            <p className="mt-3 text-slate-600">Workforce hub · Indianapolis, IN · Multi-site expansion.</p>
          </div>
          <div>
            <h4 className="font-semibold">Quick Links</h4>
            <ul className="mt-2 space-y-2">
              <li><Link to="/apply" className="hover:text-indigo-600">Apply</Link></li>
              <li><Link to="/programs" className="hover:text-indigo-600">Programs</Link></li>
              <li><Link to="/lms" className="hover:text-indigo-600">LMS</Link></li>
              <li><Link to="/connect" className="hover:text-indigo-600">Contact</Link></li>
              <li><Link to="/debug" className="text-slate-500 hover:text-indigo-600">Debug</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold">Contact</h4>
            <p className="mt-2 text-slate-600">7009 E 56th St, Suite F · Indianapolis, IN</p>
            <p className="text-slate-600">(XXX) XXX-XXXX · info@elevateforhumanity.org</p>
          </div>
        </div>
        <p className="mt-8 text-center text-xs text-slate-500">© {new Date().getFullYear()} Elevate for Humanity. All rights reserved.</p>
      </footer>
      <TailwindCheck />
    </div>
  );
}

// --- Pages ---
function Home() {
  return (
    <section className="relative overflow-hidden">
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-white via-indigo-50 to-white" />
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-16 lg:py-24 grid lg:grid-cols-2 gap-10 items-center">
        <div>
          <h1 className="text-4xl sm:text-5xl font-extrabold tracking-tight leading-tight">
            Workforce Development Ecosystem
          </h1>
          <p className="mt-5 text-lg text-slate-700 max-w-xl">
            Career pathways, apprenticeships, and industry credentials for youth and adults — aligned to state & federal funding streams and employer needs across Indiana and beyond.
          </p>
          <div className="mt-8 flex flex-wrap gap-3">
            <Link to="/programs" className="inline-flex items-center rounded-2xl bg-indigo-600 text-white px-5 py-3 font-medium shadow-sm hover:bg-indigo-700">Explore Programs</Link>
            <Link to="/partners" className="inline-flex items-center rounded-2xl border border-slate-300 px-5 py-3 font-medium hover:bg-slate-50">Partner With Us</Link>
            <Link to="/pay" className="inline-flex items-center rounded-2xl border border-slate-300 px-5 py-3 font-medium hover:bg-slate-50">Pay Tuition</Link>
          </div>
          <dl className="mt-10 grid grid-cols-2 sm:grid-cols-4 gap-6 max-w-2xl">
            <div className="rounded-2xl border border-slate-200 p-4">
              <dt className="text-xs text-slate-500">Approved & Compliant</dt>
              <dd className="mt-1 text-2xl font-semibold">DOL · DWD</dd>
            </div>
            <div className="rounded-2xl border border-slate-200 p-4">
              <dt className="text-xs text-slate-500">Funding Pathways</dt>
              <dd className="mt-1 text-2xl font-semibold">WIOA · JRI · WRG</dd>
            </div>
            <div className="rounded-2xl border border-slate-200 p-4">
              <dt className="text-xs text-slate-500">Programs</dt>
              <dd className="mt-1 text-2xl font-semibold">CPR · Barber · Esthetics · DSP · Tech</dd>
            </div>
            <div className="rounded-2xl border border-slate-200 p-4">
              <dt className="text-xs text-slate-500">Reach</dt>
              <dd className="mt-1 text-2xl font-semibold">Indiana · Multi-state</dd>
            </div>
          </dl>
        </div>
        <div className="relative">
          <div className="rounded-3xl border border-slate-200 shadow-sm p-6 bg-white">
            <h3 className="text-xl font-semibold">Get Started</h3>
            <p className="mt-2 text-slate-600">We’ll guide you step-by-step from enrollment to certification and job placement.</p>
            <ul className="mt-4 space-y-3 text-sm">
              <li className="flex items-start gap-3"><span className="mt-1 inline-flex h-5 w-5 items-center justify-center rounded-full bg-indigo-600 text-white text-[10px]">1</span> Apply for funding (WIOA/JRI/WRG)</li>
              <li className="flex items-start gap-3"><span className="mt-1 inline-flex h-5 w-5 items-center justify-center rounded-full bg-indigo-600 text-white text-[10px]">2</span> Enroll in programs using our LMS</li>
              <li className="flex items-start gap-3"><span className="mt-1 inline-flex h-5 w-5 items-center justify-center rounded-full bg-indigo-600 text-white text-[10px]">3</span> Complete credentials & connect with employers</li>
            </ul>
            <Link to="/apply" className="mt-6 inline-flex w-full items-center justify-center rounded-2xl bg-indigo-600 px-5 py-3 font-medium text-white hover:bg-indigo-700">Start Application</Link>
            <p className="mt-3 text-xs text-slate-500">Questions? <Link className="underline" to="/connect">Contact our team</Link>.</p>
          </div>
        </div>
      </div>
    </section>
  );
}

function Page({ title, children }: { title: string; children?: React.ReactNode }) {
  return (
    <section className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-10">
      <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
      <div className="mt-4 text-slate-700 leading-relaxed">{children}</div>
    </section>
  );
}

const Hub = () => <Page title="Hub">Stay updated with news, dashboards, and quick resources.</Page>;
const Programs = () => <Page title="Programs">Browse our full program catalog with details on funding eligibility.</Page>;
const LMS = () => <Page title="LMS">Login to your courses, track certifications, and monitor progress.</Page>;
const Connect = () => <Page title="Connect">Reach out through our contact form, explore the directory, or begin a partner intake.</Page>;
const Pay = () => <Page title="Pay">Secure payment links (Stripe) and invoices for tuition and services.</Page>;
const Compliance = () => <Page title="Compliance">Access policies, DOL/DWD documentation, and reporting portals.</Page>;
const Apply = () => <Page title="Apply">Submit your student application, upload documents, and choose funding options.</Page>;
const Partners = () => <Page title="Partners">Learn about partnering with EFH: WEX/OJT reimbursements, revenue-share models, and more.</Page>;

// NEW: Debug page that reads /health from the server
function Debug() {
  const [data, setData] = useState<any>(null);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    fetch("/health")
      .then(r => r.json())
      .then(setData)
      .catch(e => setErr(String(e)));
  }, []);

  return (
    <Page title="Debug / Health">
      <div className="grid md:grid-cols-2 gap-6">
        <div className="rounded-2xl border border-slate-200 p-4">
          <h3 className="font-semibold">Server Health</h3>
          {err && <p className="text-red-600 text-sm mt-2">{err}</p>}
          {!data && !err && <p className="text-slate-500 text-sm mt-2">Loading…</p>}
          {data && (
            <ul className="mt-3 text-sm space-y-2">
              <li><span className="text-slate-500">status:</span> {String(data.status)}</li>
              <li><span className="text-slate-500">mode:</span> {String(data.mode)}</li>
              <li><span className="text-slate-500">timestamp:</span> {String(data.timestamp)}</li>
              <li><span className="text-slate-500">port:</span> {String(data.port)}</li>
              <li><span className="text-slate-500">tailwind.ok:</span> {String(data.tailwind?.ok)}</li>
              <li><span className="text-slate-500">tailwind.lastPingIso:</span> {String(data.tailwind?.lastPingIso)}</li>
            </ul>
          )}
        </div>
        <div className="rounded-2xl border border-slate-200 p-4">
          <h3 className="font-semibold">Client Checks</h3>
          <p className="text-sm text-slate-600 mt-2">
            The floating badge shows whether Tailwind is active. If it says "NOT loaded", run the client clean build.
          </p>
          <ol className="mt-3 list-decimal list-inside text-sm space-y-1 text-slate-700">
            <li>Open DevTools → Network → confirm CSS is loaded (no 404).</li>
            <li>Run <code>npm run quick</code> for fast rebuild or <code>npm run clean</code> for full reset.</li>
            <li>Reload the page and re-check the green badge.</li>
          </ol>
        </div>
      </div>
    </Page>
  );
}

const NotFound = () => (
  <Page title="Page not found">
    We couldn't find that page. <Link to="/" className="text-indigo-700 underline">Go back home</Link>.
  </Page>
);

export default function App() {
  return (
    <BrowserRouter>
      <Shell>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/hub" element={<Hub />} />
          <Route path="/programs" element={<Programs />} />
          <Route path="/lms" element={<LMS />} />
          <Route path="/connect" element={<Connect />} />
          <Route path="/pay" element={<Pay />} />
          <Route path="/compliance" element={<Compliance />} />
          <Route path="/apply" element={<Apply />} />
          <Route path="/partners" element={<Partners />} />
          <Route path="/debug" element={<Debug />} />
          <Route path="/main" element={<Navigate to="/" replace />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </Shell>
    </BrowserRouter>
  );
}


All set! I added a /debug page to your React app (check the “Debug” link in the navbar or go to /debug). It pulls from your server’s /health endpoint and shows:

status, build mode (quick/clean), timestamp, port

Tailwind status and last client ping time


To complete the loop, make sure your server has the telemetry + debug support:

server.mjs changes (add if you haven’t already)

import express from "express";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const distPath = path.join(__dirname, "client", "dist");

// Track last client telemetry (Tailwind status)
let lastClientTelemetry = { tailwindOk: null, ts: null };

function detectBuildMode() {
  if (process.env.RUN_MODE) return process.env.RUN_MODE;
  const quick = path.join(__dirname, ".buildmode-quick");
  const clean = path.join(__dirname, ".buildmode-clean");
  if (fs.existsSync(clean)) return "clean";
  if (fs.existsSync(quick)) return "quick";
  return "unknown";
}
const buildMode = detectBuildMode();

// Serve React build
app.use(express.static(distPath, { etag: false, lastModified: false, maxAge: 0 }));

// Receive client telemetry
app.post("/_telemetry", express.json(), (req, res) => {
  const ok = !!req.body?.tailwindOk;
  lastClientTelemetry = { tailwindOk: ok, ts: Date.now() };
  res.sendStatus(204);
});

// Health JSON
app.get("/health", (_req, res) => {
  res.json({
    status: "healthy",
    mode: buildMode,
    timestamp: new Date().toISOString(),
    port: process.env.PORT || 5000,
    tailwind: {
      ok: lastClientTelemetry.tailwindOk,
      lastPingIso: lastClientTelemetry.ts ? new Date(lastClientTelemetry.ts).toISOString() : null,
    },
    ready: true,
  });
});

// NEW: human-friendly debug page
app.get("/debug", (_req, res) => {
  res.send(`<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>EFH Debug</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial; margin: 2rem; }
    .card { border: 1px solid #e5e7eb; border-radius: 12px; padding: 1rem; margin-bottom: 1rem; }
    .muted { color: #6b7280; }
    code { background: #f3f4f6; padding: 2px 4px; border-radius: 6px; }
  </style>
</head>
<body>
  <h1>EFH Debug</h1>
  <div class="card">
    <div>Build mode: <strong>${buildMode}</strong></div>
    <div>Server time: <span class="muted">${new Date().toISOString()}</span></div>
    <div>Port: <code>${process.env.PORT || 5000}</code></div>
  </div>
  <div class="card">
    <div>Tailwind OK: <strong>${String(lastClientTelemetry.tailwindOk)}</strong></div>
    <div>Last client ping: <span class="muted">${lastClientTelemetry.ts ? new Date(lastClientTelemetry.ts).toISOString() : "none"}</span></div>
  </div>
  <p class="muted">This page is server-rendered. For the React version, open <code>/debug</code> within the SPA.</p>
</body>
</html>`);
});

// SPA fallback
app.get("*", (_req, res) => res.sendFile(path.join(distPath, "index.html")));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`EFH server running at http://localhost:${PORT}`);
});

Now you’ve got:

A React Debug page (/debug) inside your app

A server-rendered Debug page (also /debug, but the SPA will usually intercept it once loaded)

A /health JSON endpoint for programmatic checks

A floating Tailwind OK/NOT badge and telemetry


Want me to add a little Build Restart button on the React Debug page that pings a protected endpoint (e.g., /_restart) if you later add one, so you can trigger a rebuild from the browser?

