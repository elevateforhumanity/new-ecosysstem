generator client {
  provider = "prisma-client-js"
}

// Using SQLite for local/dev. To switch to Postgres: change provider to "postgresql" and set DATABASE_URL.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model LmsOrganization {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  domain    String? @unique
  users     LmsUser[]
  courses   LmsCourse[]
  products  LmsProduct[]
  partners  LmsPartner[]
  createdAt DateTime @default(now())

  @@map("lms_organizations")
}

model LmsUser {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String?
  password  String             // bcrypt hash
  role      String  @default("STUDENT") // values: ADMIN|INSTRUCTOR|STUDENT
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  enrollments LmsEnrollment[]
  orders    LmsOrder[]
  createdAt DateTime @default(now())

  @@map("lms_users")
}


model LmsCourse {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String  @unique
  price     Int     @default(0) // cents
  modules   LmsModule[]
  lessons   LmsLesson[]
  enrollments LmsEnrollment[]
  published Boolean @default(false)
  createdAt DateTime @default(now())

  @@map("lms_courses")
}

model LmsModule {
  id        String  @id @default(cuid())
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String
  order     Int     @default(0)
  lessons   LmsLesson[]
  createdAt DateTime @default(now())

  @@map("lms_modules")
}

model LmsLesson {
  id        String  @id @default(cuid())
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId  String?
  module    LmsModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title     String
  type      String @default("TEXT") // values: TEXT|VIDEO|QUIZ
  content   String?
  duration  Int? // seconds
  order     Int   @default(0)
  createdAt DateTime @default(now())

  @@map("lms_lessons")
}


model LmsEnrollment {
  id        String  @id @default(cuid())
  userId    String
  user      LmsUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    LmsCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Float  @default(0)
  status    String @default("ACTIVE") // values: ACTIVE|COMPLETED|CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("lms_enrollments")
}


model LmsCertificate {
  id        String  @id @default(cuid())
  userId    String
  courseId  String
  url       String
  issuedAt  DateTime @default(now())

  @@map("lms_certificates")
}


model LmsProduct {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  title     String
  slug      String  @unique
  price     Int     @default(0) // cents
  image     String?
  active    Boolean @default(true)
  createdAt DateTime @default(now())

  @@map("lms_products")
}

model LmsOrder {
  id               String      @id @default(cuid())
  userId           String?
  user             LmsUser?    @relation(fields: [userId], references: [id])
  total            Int         @default(0)
  status           String @default("PENDING") // values: PENDING|PAID|FAILED|REFUNDED
  stripeSessionId  String?
  createdAt        DateTime    @default(now())

  @@map("lms_orders")
}

model LmsPartner {
  id        String  @id @default(cuid())
  orgId     String?
  org       LmsOrganization? @relation(fields: [orgId], references: [id])
  name      String
  category  String
  city      String?
  state     String?
  email     String?
  phone     String?
  url       String?
  approved  Boolean @default(false)
  createdAt DateTime @default(now())

  @@map("lms_partners")
}

model LmsPage {
  id        String  @id @default(cuid())
  slug      String  @unique
  title     String
  content   String?
  published Boolean @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("lms_pages")
}

// Monetization & Growth Models (new)
model Affiliate {
  code       String  @id
  email      String
  name       String?
  website    String?
  clicks     Int     @default(0)
  referrals  Int     @default(0)
  earnings   Float   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([email])
  @@map("affiliates")
}

model DirectoryListing {
  id          String  @id @default(cuid())
  name        String
  category    String
  url         String?
  description String?
  plan        String  @default("standard")
  status      String  @default("pending") // pending|approved|rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@map("directory_listings")
}

model SocialPostHistory {
  id        String  @id @default(cuid())
  templateId String
  template  String
  postedAt  DateTime @default(now())
  channel   String? // future: twitter|linkedin etc

  @@index([templateId])
  @@map("social_post_history")
}
