#!/usr/bin/env node

/**
 * Interactive Supabase Credentials Setup
 * Guides you through getting and configuring Supabase for EFH Platform
 */

import fs from 'fs';
import { createInterface } from 'readline';

// Color codes for output
const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

class SupabaseSetup {
  constructor() {
    this.rl = createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.credentials = {};
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  async setupCredentials() {
    log('🚀 Supabase Credentials Setup for EFH Platform', 'bold');
    log('=' .repeat(60), 'cyan');
    
    // Step 1: Check if user has Supabase account
    await this.checkSupabaseAccount();
    
    // Step 2: Guide through getting credentials
    await this.getCredentials();
    
    // Step 3: Create .env file
    await this.createEnvFile();
    
    // Step 4: Test connection
    await this.testConnection();
    
    this.rl.close();
  }

  async checkSupabaseAccount() {
    log('\n📋 Step 1: Supabase Account Check', 'bold');
    log('-'.repeat(40), 'blue');
    
    const hasAccount = await this.question('Do you have a Supabase account? (y/n): ');
    
    if (hasAccount.toLowerCase() !== 'y') {
      log('\n🌐 Creating Supabase Account:', 'blue');
      log('1. Go to: https://supabase.com', 'cyan');
      log('2. Click "Start your project"', 'cyan');
      log('3. Sign up with GitHub (recommended)', 'cyan');
      log('4. Create a new project', 'cyan');
      log('5. Choose a region close to your users', 'cyan');
      log('6. Wait for project to be ready (2-3 minutes)', 'cyan');
      
      await this.question('\nPress Enter when you have created your Supabase project...');
    }
    
    log('✅ Supabase account confirmed!', 'green');
  }

  async getCredentials() {
    log('\n🔑 Step 2: Getting Your Supabase Credentials', 'bold');
    log('-'.repeat(40), 'blue');
    
    log('\n📍 Where to find your credentials:', 'blue');
    log('1. Go to your Supabase project dashboard', 'cyan');
    log('2. Click on "Settings" in the left sidebar', 'cyan');
    log('3. Click on "API" in the settings menu', 'cyan');
    log('4. You\'ll see your Project URL and API Keys', 'cyan');
    
    log('\n🔗 Getting Project URL:', 'blue');
    log('Look for "Project URL" - it looks like:', 'yellow');
    log('https://abcdefghijklmnop.supabase.co', 'cyan');
    
    this.credentials.url = await this.question('\nEnter your Supabase Project URL: ');
    
    if (!this.credentials.url.includes('supabase.co')) {
      log('⚠️  That doesn\'t look like a Supabase URL. Please check and try again.', 'yellow');
      this.credentials.url = await this.question('Enter your Supabase Project URL: ');
    }
    
    log('\n🔑 Getting API Keys:', 'blue');
    log('Look for "Project API keys" section:', 'yellow');
    log('- anon/public key (starts with "eyJ...")', 'cyan');
    log('- service_role key (starts with "eyJ..." - keep this secret!)', 'cyan');
    
    this.credentials.anonKey = await this.question('\nEnter your anon/public key: ');
    this.credentials.serviceKey = await this.question('Enter your service_role key: ');
    
    // Validate keys
    if (!this.credentials.anonKey.startsWith('eyJ') || !this.credentials.serviceKey.startsWith('eyJ')) {
      log('⚠️  Those don\'t look like valid Supabase keys. Please check and try again.', 'yellow');
      return await this.getCredentials();
    }
    
    log('✅ Credentials collected!', 'green');
  }

  async createEnvFile() {
    log('\n📄 Step 3: Creating Environment File', 'bold');
    log('-'.repeat(40), 'blue');
    
    // Check if .env already exists
    if (fs.existsSync('.env')) {
      const overwrite = await this.question('.env file already exists. Overwrite? (y/n): ');
      if (overwrite.toLowerCase() !== 'y') {
        log('Skipping .env creation. You can manually add the credentials.', 'yellow');
        return;
      }
    }
    
    // Create .env content
    const envContent = `# ===================================================================
# EFH Platform Environment Configuration
# Generated by setup-supabase-credentials.js
# ===================================================================

# === SUPABASE CONFIGURATION (REQUIRED) ===
SUPABASE_URL=${this.credentials.url}
SUPABASE_ANON_KEY=${this.credentials.anonKey}
SUPABASE_SERVICE_ROLE=${this.credentials.serviceKey}

# Database URL (constructed from Supabase URL)
DATABASE_URL=${this.credentials.url.replace('https://', 'postgresql://postgres:[YOUR_DB_PASSWORD]@').replace('.supabase.co', '.supabase.co:5432/postgres')}

# === DEVELOPMENT SETTINGS ===
NODE_ENV=development
LOG_LEVEL=info
JWT_SECRET=change_me_to_a_secure_random_value

# === OPTIONAL SERVICES (configure as needed) ===
# Stripe Payment Processing
# STRIPE_PUBLISHABLE_KEY=pk_test_your_key
# STRIPE_SECRET_KEY=sk_test_your_key

# SendGrid Email Service
# SENDGRID_API_KEY=SG.your_api_key

# Twilio SMS Service
# TWILIO_ACCOUNT_SID=AC_your_sid
# TWILIO_AUTH_TOKEN=your_auth_token

# Cloudflare R2 Storage (for 95k+ pages assets)
# R2_ACCOUNT_ID=your_cloudflare_account_id
# R2_ACCESS_KEY_ID=your_r2_access_key
# R2_SECRET_ACCESS_KEY=your_r2_secret_key
# R2_BUCKET=elevate-pages

# GitHub Integration (for automated sitemaps)
# GITHUB_TOKEN_REPO=your_github_token_with_workflow_scope

# Optional Replit Backend
# REPLIT_BASE_URL=https://your-repl.repl.co

# ===================================================================
# NEXT STEPS:
# 1. Run: node config-manager.js (to verify configuration)
# 2. Run: node supabase-connection-script.js (to test connection)
# 3. Configure optional services as needed
# ===================================================================
`;

    try {
      fs.writeFileSync('.env', envContent);
      log('✅ .env file created successfully!', 'green');
      log('📍 Location: ./.env', 'blue');
    } catch (error) {
      log(`❌ Failed to create .env file: ${error.message}`, 'red');
    }
  }

  async testConnection() {
    log('\n🧪 Step 4: Testing Supabase Connection', 'bold');
    log('-'.repeat(40), 'blue');
    
    log('Running configuration check...', 'blue');
    
    try {
      // Import and run the config manager
      const { ConfigManager } = await import('./config-manager.js');
      const configManager = new ConfigManager();
      
      const validation = configManager.validateSecrets();
      
      if (validation.valid) {
        log('✅ All required credentials are configured!', 'green');
        
        log('\nRunning Supabase connection test...', 'blue');
        
        // Test the connection
        const { createClient } = await import('@supabase/supabase-js');
        const supabase = createClient(this.credentials.url, this.credentials.anonKey);
        
        // Simple connection test
        const { data, error } = await supabase.from('profiles').select('count').limit(1);
        
        if (error && !error.message.includes('relation "profiles" does not exist')) {
          throw error;
        }
        
        log('✅ Supabase connection successful!', 'green');
        
      } else {
        log('❌ Configuration validation failed', 'red');
        validation.missing.forEach(secret => {
          log(`   Missing: ${secret}`, 'red');
        });
      }
      
    } catch (error) {
      log(`⚠️  Connection test failed: ${error.message}`, 'yellow');
      
      if (error.message.includes('Invalid API key')) {
        log('💡 Check that your API keys are correct', 'blue');
      } else if (error.message.includes('relation') && error.message.includes('does not exist')) {
        log('💡 This is normal - database tables will be created later', 'blue');
        log('✅ Connection is working!', 'green');
      }
    }
  }

  async showNextSteps() {
    log('\n🎯 Setup Complete! Next Steps:', 'bold');
    log('=' .repeat(60), 'cyan');
    
    log('\n✅ What you\'ve accomplished:', 'green');
    log('   • Supabase project configured', 'blue');
    log('   • Environment variables set up', 'blue');
    log('   • Connection tested', 'blue');
    
    log('\n🚀 Next steps to activate your 95k+ page system:', 'bold');
    log('   1. Deploy database schema:', 'blue');
    log('      supabase db push', 'cyan');
    log('   \n   2. Create Supabase Edge Functions:', 'blue');
    log('      mkdir -p supabase/functions/render', 'cyan');
    log('      # (We\'ll help you create these)', 'yellow');
    log('   \n   3. Populate database with your content:', 'blue');
    log('      node populate-database.js', 'cyan');
    log('   \n   4. Test the complete system:', 'blue');
    log('      node setup-complete-system.js', 'cyan');
    
    log('\n💡 Useful commands:', 'bold');
    log('   node config-manager.js          # Check configuration', 'cyan');
    log('   node supabase-connection-script.js  # Test connection', 'cyan');
    log('   node setup-complete-system.js   # Full system analysis', 'cyan');
    
    log('\n🎉 Your 95k+ page generation system is ready for activation!', 'green');
  }
}

// Main execution
async function main() {
  try {
    const setup = new SupabaseSetup();
    await setup.setupCredentials();
    await setup.showNextSteps();
  } catch (error) {
    log(`❌ Setup failed: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { SupabaseSetup };