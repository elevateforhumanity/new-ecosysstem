import React, { useState, useEffect } from 'react';

interface AutoGeneratedProgram {
  id: string;
  title: string;
  category: 'networking' | 'cybersecurity' | 'cloud' | 'infrastructure' | 'wireless';
  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  duration: string;
  modules: ProgramModule[];
  certifications: string[];
  jobOutcomes: string[];
  salaryRange: string;
  demandScore: number;
  autoGenerated: boolean;
  deploymentStatus: 'draft' | 'testing' | 'approved' | 'deployed_local' | 'deployed_national';
  nationalAvailability: NationalDeployment;
}

interface ProgramModule {
  id: string;
  title: string;
  description: string;
  duration: string;
  learningObjectives: string[];
  practicalLabs: LabExercise[];
  assessments: Assessment[];
  prerequisites: string[];
  autoGenerated: boolean;
}

interface LabExercise {
  title: string;
  type: 'virtual_lab' | 'simulation' | 'hands_on' | 'project';
  description: string;
  equipment: string[];
  duration: string;
  difficulty: number;
}

interface Assessment {
  type: 'quiz' | 'practical' | 'project' | 'certification_prep';
  title: string;
  passingScore: number;
  timeLimit: string;
  autoGraded: boolean;
}

interface NationalDeployment {
  availableStates: string[];
  partnerInstitutions: number;
  totalCapacity: number;
  currentEnrollment: number;
  waitingList: number;
  expansionPlan: ExpansionPlan[];
}

interface ExpansionPlan {
  state: string;
  targetDate: string;
  partnerInstitutions: string[];
  estimatedCapacity: number;
  fundingSource: string;
  status: 'planned' | 'in_progress' | 'completed';
}

export function AutoProgramGenerator() {
  const [generatedPrograms, setGeneratedPrograms] = useState<AutoGeneratedProgram[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [nationalStats, setNationalStats] = useState<any>(null);
  const [selectedProgram, setSelectedProgram] = useState<AutoGeneratedProgram | null>(null);

  useEffect(() => {
    loadExistingPrograms();
    loadNationalStats();
  }, []);

  const loadExistingPrograms = async () => {
    // Simulate loading existing auto-generated programs
    const mockPrograms: AutoGeneratedProgram[] = [
      {
        id: 'net_001',
        title: 'Advanced Network Infrastructure Specialist',
        category: 'networking',
        level: 'advanced',
        duration: '16 weeks',
        modules: [
          {
            id: 'mod_001',
            title: 'Enterprise Network Design',
            description: 'Design and implement large-scale enterprise networks',
            duration: '4 weeks',
            learningObjectives: [
              'Design scalable network architectures',
              'Implement VLAN segmentation strategies',
              'Configure advanced routing protocols',
              'Optimize network performance'
            ],
            practicalLabs: [
              {
                title: 'Multi-Site Network Design',
                type: 'virtual_lab',
                description: 'Design a network for a company with 5 locations',
                equipment: ['Cisco Packet Tracer', 'GNS3', 'Virtual Routers'],
                duration: '8 hours',
                difficulty: 8
              }
            ],
            assessments: [
              {
                type: 'practical',
                title: 'Network Design Project',
                passingScore: 80,
                timeLimit: '4 hours',
                autoGraded: false
              }
            ],
            prerequisites: ['Basic networking knowledge', 'CCNA certification'],
            autoGenerated: true
          }
        ],
        certifications: ['CCNP Enterprise', 'CompTIA Network+', 'Cisco CyberOps'],
        jobOutcomes: [
          'Network Engineer',
          'Infrastructure Specialist',
          'Network Architect',
          'Systems Administrator'
        ],
        salaryRange: '$65,000 - $95,000',
        demandScore: 94,
        autoGenerated: true,
        deploymentStatus: 'deployed_national',
        nationalAvailability: {
          availableStates: ['OH', 'PA', 'MI', 'IN', 'KY', 'WV', 'NY', 'FL', 'TX', 'CA'],
          partnerInstitutions: 47,
          totalCapacity: 2340,
          currentEnrollment: 1876,
          waitingList: 312,
          expansionPlan: [
            {
              state: 'IL',
              targetDate: '2025-03-01',
              partnerInstitutions: ['Chicago Community College', 'Illinois Tech Institute'],
              estimatedCapacity: 150,
              fundingSource: 'Federal WIOA Grant',
              status: 'in_progress'
            }
          ]
        }
      },
      {
        id: 'net_002',
        title: 'Cloud Network Security Specialist',
        category: 'cybersecurity',
        level: 'intermediate',
        duration: '12 weeks',
        modules: [],
        certifications: ['AWS Security', 'Azure Security', 'CompTIA Security+'],
        jobOutcomes: ['Cloud Security Engineer', 'Network Security Analyst'],
        salaryRange: '$70,000 - $105,000',
        demandScore: 97,
        autoGenerated: true,
        deploymentStatus: 'deployed_local',
        nationalAvailability: {
          availableStates: ['OH', 'PA', 'MI'],
          partnerInstitutions: 12,
          totalCapacity: 480,
          currentEnrollment: 423,
          waitingList: 89,
          expansionPlan: []
        }
      }
    ];

    setGeneratedPrograms(mockPrograms);
  };

  const loadNationalStats = async () => {
    const stats = {
      totalPrograms: 15,
      nationalPrograms: 8,
      totalStates: 25,
      partnerInstitutions: 156,
      totalStudents: 12450,
      completionRate: 89,
      jobPlacementRate: 94,
      averageSalaryIncrease: 67
    };
    setNationalStats(stats);
  };

  const generateNewProgram = async () => {
    setIsGenerating(true);
    
    // Simulate AI program generation
    await new Promise(resolve => setTimeout(resolve, 5000));

    const newProgram: AutoGeneratedProgram = {
      id: `net_${Date.now()}`,
      title: 'AI-Generated: 5G Wireless Network Implementation',
      category: 'wireless',
      level: 'advanced',
      duration: '14 weeks',
      modules: [
        {
          id: 'mod_5g_001',
          title: '5G Network Fundamentals',
          description: 'Understanding 5G technology, architecture, and implementation',
          duration: '3 weeks',
          learningObjectives: [
            'Understand 5G network architecture',
            'Configure 5G base stations',
            'Implement network slicing',
            'Optimize 5G performance'
          ],
          practicalLabs: [
            {
              title: '5G Network Simulation',
              type: 'simulation',
              description: 'Simulate 5G network deployment in urban environment',
              equipment: ['5G Simulator Software', 'Network Analysis Tools'],
              duration: '6 hours',
              difficulty: 9
            }
          ],
          assessments: [
            {
              type: 'certification_prep',
              title: '5G Implementation Exam',
              passingScore: 85,
              timeLimit: '2 hours',
              autoGraded: true
            }
          ],
          prerequisites: ['Advanced networking knowledge', 'RF fundamentals'],
          autoGenerated: true
        }
      ],
      certifications: ['5G Network Professional', 'Wireless Network Expert'],
      jobOutcomes: [
        '5G Network Engineer',
        'Wireless Infrastructure Specialist',
        'Telecommunications Consultant'
      ],
      salaryRange: '$80,000 - $120,000',
      demandScore: 98,
      autoGenerated: true,
      deploymentStatus: 'draft',
      nationalAvailability: {
        availableStates: [],
        partnerInstitutions: 0,
        totalCapacity: 0,
        currentEnrollment: 0,
        waitingList: 0,
        expansionPlan: [
          {
            state: 'OH',
            targetDate: '2025-02-01',
            partnerInstitutions: ['Elevate for Humanity'],
            estimatedCapacity: 50,
            fundingSource: 'Federal Innovation Grant',
            status: 'planned'
          }
        ]
      }
    };

    setGeneratedPrograms(prev => [newProgram, ...prev]);
    setIsGenerating(false);
  };

  const deployNationally = async (programId: string) => {
    const program = generatedPrograms.find(p => p.id === programId);
    if (!program) return;

    // Simulate national deployment process
    const updatedProgram = {
      ...program,
      deploymentStatus: 'deployed_national' as const,
      nationalAvailability: {
        ...program.nationalAvailability,
        availableStates: [
          'OH', 'PA', 'MI', 'IN', 'KY', 'WV', 'NY', 'FL', 'TX', 'CA', 
          'IL', 'NC', 'GA', 'VA', 'TN', 'SC', 'AL', 'MS', 'LA', 'AR'
        ],
        partnerInstitutions: 89,
        totalCapacity: 4450,
        currentEnrollment: 0,
        waitingList: 0
      }
    };

    setGeneratedPrograms(prev => 
      prev.map(p => p.id === programId ? updatedProgram : p)
    );
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'deployed_national': return 'text-green-600 bg-green-100';
      case 'deployed_local': return 'text-blue-600 bg-blue-100';
      case 'approved': return 'text-purple-600 bg-purple-100';
      case 'testing': return 'text-yellow-600 bg-yellow-100';
      case 'draft': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getDemandColor = (score: number) => {
    if (score >= 95) return 'text-green-600';
    if (score >= 85) return 'text-blue-600';
    if (score >= 75) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="auto-program-generator">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">🤖 Auto Program Generator</h2>
          <p className="text-gray-600">AI-powered creation and nationwide deployment of network training programs</p>
        </div>
        <button
          onClick={generateNewProgram}
          disabled={isGenerating}
          className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 font-medium"
        >
          {isGenerating ? '🔄 Generating...' : '🤖 Generate New Program'}
        </button>
      </div>

      {/* National Statistics */}
      {nationalStats && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white border rounded-lg p-4">
            <div className="text-2xl font-bold text-blue-600">{nationalStats.totalPrograms}</div>
            <div className="text-sm text-gray-600">Total Programs</div>
          </div>
          <div className="bg-white border rounded-lg p-4">
            <div className="text-2xl font-bold text-green-600">{nationalStats.totalStates}</div>
            <div className="text-sm text-gray-600">States Covered</div>
          </div>
          <div className="bg-white border rounded-lg p-4">
            <div className="text-2xl font-bold text-purple-600">{nationalStats.partnerInstitutions}</div>
            <div className="text-sm text-gray-600">Partner Institutions</div>
          </div>
          <div className="bg-white border rounded-lg p-4">
            <div className="text-2xl font-bold text-orange-600">{nationalStats.totalStudents.toLocaleString()}</div>
            <div className="text-sm text-gray-600">Total Students</div>
          </div>
        </div>
      )}

      {/* Generation Status */}
      {isGenerating && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-4"></div>
            <div>
              <h3 className="font-semibold text-blue-900">🤖 AI Program Generator Working...</h3>
              <div className="text-sm text-blue-700 mt-1">
                <div>✅ Analyzing industry demand and job market trends</div>
                <div>✅ Generating curriculum based on employer requirements</div>
                <div>✅ Creating hands-on labs and practical exercises</div>
                <div>✅ Designing assessment and certification pathways</div>
                <div>🔄 Optimizing for nationwide deployment...</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Generated Programs */}
      <div className="space-y-6">
        {generatedPrograms.map((program) => (
          <div key={program.id} className="bg-white border rounded-lg p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center mb-2">
                  <h3 className="text-lg font-semibold text-gray-900 mr-3">{program.title}</h3>
                  {program.autoGenerated && (
                    <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">🤖 AI Generated</span>
                  )}
                </div>
                <div className="flex items-center space-x-4 text-sm text-gray-600 mb-2">
                  <span>📚 {program.category}</span>
                  <span>⏱️ {program.duration}</span>
                  <span>🎯 {program.level}</span>
                  <span>💰 {program.salaryRange}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">Market Demand:</span>
                  <span className={`font-bold ${getDemandColor(program.demandScore)}`}>
                    {program.demandScore}%
                  </span>
                </div>
              </div>
              <div className="text-right">
                <span className={`px-3 py-1 text-xs font-medium rounded-full ${getStatusColor(program.deploymentStatus)}`}>
                  {program.deploymentStatus.replace('_', ' ').toUpperCase()}
                </span>
              </div>
            </div>

            {/* National Availability */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div className="bg-gray-50 rounded p-3">
                <div className="text-sm font-medium text-gray-700">Available States</div>
                <div className="text-lg font-bold text-blue-600">{program.nationalAvailability.availableStates.length}</div>
                <div className="text-xs text-gray-500">
                  {program.nationalAvailability.availableStates.slice(0, 5).join(', ')}
                  {program.nationalAvailability.availableStates.length > 5 && '...'}
                </div>
              </div>
              <div className="bg-gray-50 rounded p-3">
                <div className="text-sm font-medium text-gray-700">Partner Institutions</div>
                <div className="text-lg font-bold text-green-600">{program.nationalAvailability.partnerInstitutions}</div>
                <div className="text-xs text-gray-500">Nationwide network</div>
              </div>
              <div className="bg-gray-50 rounded p-3">
                <div className="text-sm font-medium text-gray-700">Current Enrollment</div>
                <div className="text-lg font-bold text-purple-600">
                  {program.nationalAvailability.currentEnrollment.toLocaleString()}
                </div>
                <div className="text-xs text-gray-500">
                  {program.nationalAvailability.waitingList > 0 && 
                    `${program.nationalAvailability.waitingList} waiting`
                  }
                </div>
              </div>
            </div>

            {/* Job Outcomes */}
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 mb-2">🎯 Career Outcomes:</div>
              <div className="flex flex-wrap gap-2">
                {program.jobOutcomes.map((outcome, index) => (
                  <span key={index} className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
                    {outcome}
                  </span>
                ))}
              </div>
            </div>

            {/* Certifications */}
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 mb-2">🏆 Certifications:</div>
              <div className="flex flex-wrap gap-2">
                {program.certifications.map((cert, index) => (
                  <span key={index} className="text-xs bg-yellow-100 text-yellow-700 px-2 py-1 rounded">
                    {cert}
                  </span>
                ))}
              </div>
            </div>

            {/* Actions */}
            <div className="flex space-x-3">
              <button
                onClick={() => setSelectedProgram(program)}
                className="text-sm bg-blue-100 text-blue-700 px-4 py-2 rounded hover:bg-blue-200"
              >
                📊 View Details
              </button>
              
              {program.deploymentStatus !== 'deployed_national' && (
                <button
                  onClick={() => deployNationally(program.id)}
                  className="text-sm bg-green-100 text-green-700 px-4 py-2 rounded hover:bg-green-200"
                >
                  🚀 Deploy Nationally
                </button>
              )}
              
              <button className="text-sm bg-purple-100 text-purple-700 px-4 py-2 rounded hover:bg-purple-200">
                🎓 Enroll Students
              </button>
              
              <button className="text-sm bg-orange-100 text-orange-700 px-4 py-2 rounded hover:bg-orange-200">
                📝 Customize Program
              </button>
            </div>

            {/* Expansion Plans */}
            {program.nationalAvailability.expansionPlan.length > 0 && (
              <div className="mt-4 bg-yellow-50 border border-yellow-200 rounded p-3">
                <div className="text-sm font-medium text-yellow-800 mb-2">📈 Expansion Plans:</div>
                {program.nationalAvailability.expansionPlan.map((plan, index) => (
                  <div key={index} className="text-xs text-yellow-700 mb-1">
                    🎯 {plan.state} - Target: {plan.targetDate} - Capacity: {plan.estimatedCapacity} students
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Program Detail Modal */}
      {selectedProgram && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-4xl max-h-96 overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-bold">{selectedProgram.title}</h3>
              <button
                onClick={() => setSelectedProgram(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <h4 className="font-semibold mb-2">📚 Program Modules:</h4>
                {selectedProgram.modules.map((module, index) => (
                  <div key={index} className="bg-gray-50 rounded p-3 mb-2">
                    <div className="font-medium">{module.title}</div>
                    <div className="text-sm text-gray-600">{module.description}</div>
                    <div className="text-xs text-gray-500 mt-1">Duration: {module.duration}</div>
                  </div>
                ))}
              </div>
              
              <div>
                <h4 className="font-semibold mb-2">🌍 National Deployment:</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>States: {selectedProgram.nationalAvailability.availableStates.join(', ')}</div>
                  <div>Partners: {selectedProgram.nationalAvailability.partnerInstitutions}</div>
                  <div>Capacity: {selectedProgram.nationalAvailability.totalCapacity}</div>
                  <div>Enrolled: {selectedProgram.nationalAvailability.currentEnrollment}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}