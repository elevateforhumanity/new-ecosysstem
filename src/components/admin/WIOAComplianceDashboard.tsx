import React, { useState, useEffect } from 'react';

interface WIOAMetrics {
  performanceIndicators: PerformanceIndicator[];
  participantData: ParticipantData;
  employmentOutcomes: EmploymentOutcome[];
  complianceStatus: ComplianceStatus;
  reportingSchedule: ReportingSchedule[];
  realTimeAlerts: ComplianceAlert[];
}

interface PerformanceIndicator {
  indicator: string;
  target: number;
  actual: number;
  status: 'exceeds' | 'meets' | 'below' | 'critical';
  trend: 'improving' | 'stable' | 'declining';
  lastUpdated: string;
}

interface ParticipantData {
  totalParticipants: number;
  demographics: {
    veterans: number;
    dislocatedWorkers: number;
    lowIncome: number;
    youth: number;
    individuals: number;
  };
  byProgram: {
    program: string;
    participants: number;
    completions: number;
    placements: number;
  }[];
}

interface EmploymentOutcome {
  quarter: string;
  placementRate: number;
  medianEarnings: number;
  credentialRate: number;
  retentionRate: number;
  measurableSkillGains: number;
}

interface ComplianceStatus {
  overallScore: number;
  areas: {
    area: string;
    score: number;
    status: 'compliant' | 'warning' | 'non_compliant';
    lastAudit: string;
    nextReview: string;
  }[];
}

interface ReportingSchedule {
  reportType: string;
  dueDate: string;
  status: 'completed' | 'in_progress' | 'overdue' | 'upcoming';
  autoGenerated: boolean;
  submissionMethod: string;
}

interface ComplianceAlert {
  id: string;
  type: 'performance' | 'reporting' | 'participant' | 'financial';
  severity: 'low' | 'medium' | 'high' | 'critical';
  message: string;
  actionRequired: string;
  deadline: string;
  autoResolution: boolean;
}

export function WIOAComplianceDashboard() {
  const [metrics, setMetrics] = useState<WIOAMetrics | null>(null);
  const [selectedTimeframe, setSelectedTimeframe] = useState('current_quarter');
  const [autoReporting, setAutoReporting] = useState(true);
  const [realTimeMode, setRealTimeMode] = useState(true);

  useEffect(() => {
    loadWIOAMetrics();
    
    if (realTimeMode) {
      const interval = setInterval(loadWIOAMetrics, 60000); // Update every minute
      return () => clearInterval(interval);
    }
  }, [selectedTimeframe, realTimeMode]);

  const loadWIOAMetrics = async () => {
    // Simulate loading WIOA compliance data
    await new Promise(resolve => setTimeout(resolve, 1000));

    const mockMetrics: WIOAMetrics = {
      performanceIndicators: [
        {
          indicator: 'Employment Rate (2nd Quarter)',
          target: 70,
          actual: 78.5,
          status: 'exceeds',
          trend: 'improving',
          lastUpdated: new Date().toISOString()
        },
        {
          indicator: 'Employment Rate (4th Quarter)',
          target: 65,
          actual: 72.3,
          status: 'exceeds',
          trend: 'stable',
          lastUpdated: new Date().toISOString()
        },
        {
          indicator: 'Median Earnings (2nd Quarter)',
          target: 5500,
          actual: 6200,
          status: 'exceeds',
          trend: 'improving',
          lastUpdated: new Date().toISOString()
        },
        {
          indicator: 'Credential Attainment Rate',
          target: 60,
          actual: 67.8,
          status: 'exceeds',
          trend: 'improving',
          lastUpdated: new Date().toISOString()
        },
        {
          indicator: 'Measurable Skill Gains',
          target: 50,
          actual: 58.2,
          status: 'exceeds',
          trend: 'stable',
          lastUpdated: new Date().toISOString()
        }
      ],
      participantData: {
        totalParticipants: 1247,
        demographics: {
          veterans: 187,
          dislocatedWorkers: 298,
          lowIncome: 456,
          youth: 123,
          individuals: 183
        },
        byProgram: [
          { program: 'Medical Assistant', participants: 342, completions: 298, placements: 276 },
          { program: 'IT Support', participants: 287, completions: 251, placements: 231 },
          { program: 'HVAC Technician', participants: 298, completions: 267, placements: 248 },
          { program: 'Business Administration', participants: 189, completions: 165, placements: 152 },
          { program: 'Network Infrastructure', participants: 131, completions: 118, placements: 112 }
        ]
      },
      employmentOutcomes: [
        {
          quarter: 'Q1 2024',
          placementRate: 76.2,
          medianEarnings: 5980,
          credentialRate: 65.4,
          retentionRate: 82.1,
          measurableSkillGains: 56.8
        },
        {
          quarter: 'Q2 2024',
          placementRate: 78.5,
          medianEarnings: 6200,
          credentialRate: 67.8,
          retentionRate: 84.3,
          measurableSkillGains: 58.2
        },
        {
          quarter: 'Q3 2024',
          placementRate: 79.1,
          medianEarnings: 6350,
          credentialRate: 69.2,
          retentionRate: 85.7,
          measurableSkillGains: 59.6
        }
      ],
      complianceStatus: {
        overallScore: 94,
        areas: [
          {
            area: 'Performance Accountability',
            score: 96,
            status: 'compliant',
            lastAudit: '2024-08-15',
            nextReview: '2025-02-15'
          },
          {
            area: 'Financial Management',
            score: 92,
            status: 'compliant',
            lastAudit: '2024-07-20',
            nextReview: '2025-01-20'
          },
          {
            area: 'Participant Eligibility',
            score: 95,
            status: 'compliant',
            lastAudit: '2024-09-01',
            nextReview: '2025-03-01'
          },
          {
            area: 'Equal Opportunity',
            score: 98,
            status: 'compliant',
            lastAudit: '2024-08-30',
            nextReview: '2025-02-28'
          },
          {
            area: 'Data Validation',
            score: 89,
            status: 'warning',
            lastAudit: '2024-09-10',
            nextReview: '2024-12-10'
          }
        ]
      },
      reportingSchedule: [
        {
          reportType: 'Quarterly Performance Report',
          dueDate: '2024-10-30',
          status: 'in_progress',
          autoGenerated: true,
          submissionMethod: 'WIOA Portal'
        },
        {
          reportType: 'Annual Financial Report',
          dueDate: '2024-12-31',
          status: 'upcoming',
          autoGenerated: true,
          submissionMethod: 'Federal Reporting System'
        },
        {
          reportType: 'Equal Opportunity Data',
          dueDate: '2024-11-15',
          status: 'upcoming',
          autoGenerated: true,
          submissionMethod: 'DOL EO Portal'
        }
      ],
      realTimeAlerts: [
        {
          id: 'alert_001',
          type: 'performance',
          severity: 'medium',
          message: 'IT Support program placement rate dropped to 68% this month',
          actionRequired: 'Review job placement strategies and employer partnerships',
          deadline: '2024-10-25',
          autoResolution: false
        },
        {
          id: 'alert_002',
          type: 'reporting',
          severity: 'high',
          message: 'Quarterly report due in 5 days',
          actionRequired: 'Review and submit Q3 performance data',
          deadline: '2024-10-30',
          autoResolution: true
        }
      ]
    };

    setMetrics(mockMetrics);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'exceeds':
      case 'compliant':
      case 'completed':
        return 'text-green-600 bg-green-100';
      case 'meets':
      case 'warning':
      case 'in_progress':
        return 'text-yellow-600 bg-yellow-100';
      case 'below':
      case 'non_compliant':
      case 'overdue':
        return 'text-red-600 bg-red-100';
      case 'upcoming':
        return 'text-blue-600 bg-blue-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-100 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'low': return 'text-blue-600 bg-blue-100 border-blue-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  if (!metrics) {
    return (
      <div className="text-center py-8">
        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <p className="mt-4 text-gray-600">Loading WIOA compliance data...</p>
      </div>
    );
  }

  return (
    <div className="wioa-compliance-dashboard">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">📊 WIOA Compliance Dashboard</h2>
          <p className="text-gray-600">Real-time performance monitoring and automated reporting</p>
        </div>
        <div className="flex items-center space-x-4">
          <select
            value={selectedTimeframe}
            onChange={(e) => setSelectedTimeframe(e.target.value)}
            className="border border-gray-300 rounded px-3 py-2 text-sm"
          >
            <option value="current_quarter">Current Quarter</option>
            <option value="last_quarter">Last Quarter</option>
            <option value="year_to_date">Year to Date</option>
            <option value="program_year">Program Year</option>
          </select>
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={autoReporting}
              onChange={(e) => setAutoReporting(e.target.checked)}
              className="mr-2"
            />
            <span className="text-sm text-gray-700">Auto Reporting</span>
          </label>
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={realTimeMode}
              onChange={(e) => setRealTimeMode(e.target.checked)}
              className="mr-2"
            />
            <span className="text-sm text-gray-700">Real-time Updates</span>
          </label>
        </div>
      </div>

      {/* Compliance Score */}
      <div className="bg-white border rounded-lg p-6 mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Overall Compliance Score</h3>
            <p className="text-gray-600">Based on all WIOA performance indicators</p>
          </div>
          <div className="text-right">
            <div className="text-4xl font-bold text-green-600">{metrics.complianceStatus.overallScore}%</div>
            <div className="text-sm text-gray-500">Excellent Standing</div>
          </div>
        </div>
      </div>

      {/* Real-time Alerts */}
      {metrics.realTimeAlerts.length > 0 && (
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">🚨 Active Alerts</h3>
          <div className="space-y-3">
            {metrics.realTimeAlerts.map((alert) => (
              <div key={alert.id} className={`border rounded-lg p-4 ${getSeverityColor(alert.severity)}`}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="font-medium mb-1">{alert.message}</div>
                    <div className="text-sm mb-2">{alert.actionRequired}</div>
                    <div className="text-xs">Deadline: {alert.deadline}</div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {alert.autoResolution && (
                      <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">🤖 Auto-resolving</span>
                    )}
                    <button className="text-xs bg-white px-3 py-1 rounded border hover:bg-gray-50">
                      Resolve
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Performance Indicators */}
      <div className="mb-8">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">📈 WIOA Performance Indicators</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {metrics.performanceIndicators.map((indicator, index) => (
            <div key={index} className="bg-white border rounded-lg p-6">
              <div className="flex items-start justify-between mb-4">
                <h4 className="font-medium text-gray-900 text-sm">{indicator.indicator}</h4>
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(indicator.status)}`}>
                  {indicator.status.toUpperCase()}
                </span>
              </div>
              
              <div className="mb-4">
                <div className="flex items-baseline space-x-2">
                  <span className="text-2xl font-bold text-gray-900">
                    {indicator.indicator.includes('Earnings') ? '$' : ''}{indicator.actual}
                    {!indicator.indicator.includes('Earnings') ? '%' : ''}
                  </span>
                  <span className="text-sm text-gray-500">
                    Target: {indicator.indicator.includes('Earnings') ? '$' : ''}{indicator.target}
                    {!indicator.indicator.includes('Earnings') ? '%' : ''}
                  </span>
                </div>
              </div>

              <div className="mb-4">
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full ${
                      indicator.actual >= indicator.target ? 'bg-green-500' : 'bg-yellow-500'
                    }`}
                    style={{ width: `${Math.min((indicator.actual / indicator.target) * 100, 100)}%` }}
                  ></div>
                </div>
              </div>

              <div className="flex items-center justify-between text-xs text-gray-500">
                <span>
                  {indicator.trend === 'improving' ? '📈' : 
                   indicator.trend === 'declining' ? '📉' : '➡️'} {indicator.trend}
                </span>
                <span>Updated: {new Date(indicator.lastUpdated).toLocaleDateString()}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Participant Demographics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div className="bg-white border rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">👥 Participant Demographics</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Total Participants</span>
              <span className="font-bold text-gray-900">{metrics.participantData.totalParticipants}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Veterans</span>
              <span className="font-medium">{metrics.participantData.demographics.veterans}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Dislocated Workers</span>
              <span className="font-medium">{metrics.participantData.demographics.dislocatedWorkers}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Low Income</span>
              <span className="font-medium">{metrics.participantData.demographics.lowIncome}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Youth (14-24)</span>
              <span className="font-medium">{metrics.participantData.demographics.youth}</span>
            </div>
          </div>
        </div>

        <div className="bg-white border rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">📚 Program Performance</h3>
          <div className="space-y-3">
            {metrics.participantData.byProgram.map((program, index) => (
              <div key={index} className="border-b border-gray-200 last:border-b-0 pb-2 last:pb-0">
                <div className="flex justify-between items-center mb-1">
                  <span className="font-medium text-gray-900">{program.program}</span>
                  <span className="text-sm text-gray-500">{program.participants} enrolled</span>
                </div>
                <div className="flex justify-between text-sm text-gray-600">
                  <span>Completions: {program.completions}</span>
                  <span>Placements: {program.placements}</span>
                  <span>Rate: {((program.placements / program.participants) * 100).toFixed(1)}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Reporting Schedule */}
      <div className="mb-8">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">📅 Reporting Schedule</h3>
        <div className="bg-white border rounded-lg overflow-hidden">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Report Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Due Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Auto-Generated</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {metrics.reportingSchedule.map((report, index) => (
                <tr key={index}>
                  <td className="px-6 py-4 font-medium text-gray-900">{report.reportType}</td>
                  <td className="px-6 py-4 text-sm text-gray-600">{report.dueDate}</td>
                  <td className="px-6 py-4">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(report.status)}`}>
                      {report.status.replace('_', ' ').toUpperCase()}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    {report.autoGenerated ? (
                      <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded">🤖 Yes</span>
                    ) : (
                      <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">Manual</span>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    <button className="text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200">
                      {report.status === 'completed' ? 'View' : 'Generate'}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Compliance Areas */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">✅ Compliance Areas</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {metrics.complianceStatus.areas.map((area, index) => (
            <div key={index} className="bg-white border rounded-lg p-6">
              <div className="flex items-start justify-between mb-4">
                <h4 className="font-medium text-gray-900">{area.area}</h4>
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(area.status)}`}>
                  {area.status.replace('_', ' ').toUpperCase()}
                </span>
              </div>
              
              <div className="mb-4">
                <div className="text-2xl font-bold text-gray-900 mb-1">{area.score}%</div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full ${
                      area.score >= 90 ? 'bg-green-500' : 
                      area.score >= 80 ? 'bg-yellow-500' : 'bg-red-500'
                    }`}
                    style={{ width: `${area.score}%` }}
                  ></div>
                </div>
              </div>

              <div className="text-xs text-gray-500 space-y-1">
                <div>Last Audit: {area.lastAudit}</div>
                <div>Next Review: {area.nextReview}</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}